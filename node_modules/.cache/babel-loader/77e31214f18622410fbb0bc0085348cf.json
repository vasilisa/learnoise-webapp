{"ast":null,"code":"var _jsxFileName = \"/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/Board/Board.js\";\nimport React from 'react';\nimport './Board.css';\nimport Brick from '../Brick/Brick.js';\nimport ConfRate from '../Confidence/ConfRateNew.js';\nimport { API_URL } from '../../config'; // import { handleResponse } from '../helpers';\n\nimport { withRouter } from 'react-router-dom'; // import { CSSTransitionGroup } from 'react-transition-group';\n\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'; // for newer version \n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    const participant_info = this.props.location.state.participant_info;\n    const block_info = this.props.location.state.block_info;\n    const pool_symbols = this.props.location.state.pool_symbols; // console.log(block_info)\n\n    const current_symbols = ['', '']; // Define intitial left and right symbols: \n\n    current_symbols[0] = pool_symbols[block_info.position[0] - 1]; // 1 if on the right symbol 1, 0 if on the left \n\n    current_symbols[1] = pool_symbols[2 - block_info.position[0]]; // \n\n    this.state = {\n      clickable: true,\n      // freezing when subject has chosen a symbol\n      animation: true,\n      // relaunch fading animation after each trial\n      feedback: Array(2).fill(null),\n      noFeedback: ['null', 'null'],\n      symbolHighlight: ['null', 'null'],\n      participant_info: participant_info,\n      block_info: block_info,\n      error: '',\n      chosen_rewards: [],\n      unchosen_rewards: [],\n      block_perf: 0.0,\n      chosen_symbols: [],\n      chosen_positions: [],\n      reaction_times: [],\n      current_symbols: current_symbols,\n      pool_symbols: pool_symbols,\n      completed: 'no',\n      showFeedback: false,\n      showConf: false,\n      confidence: [],\n      reaction_times_conf: []\n    };\n    this.redirectToBlock.bind(this);\n    var time_date_first = new Date();\n    this.prev_reaction_time_date = time_date_first.getTime(); // this._handleGoBack.bind(this);  TO IMPLEMENT LATER   \n    // this._handleRefresh.bind(this);\n  }\n\n  renderBrick(i) {\n    return /*#__PURE__*/React.createElement(Brick, {\n      symbol: this.state.current_symbols[i],\n      feedback: this.state.feedback[i],\n      animation: this.state.animation,\n      noFeedback: this.state.noFeedback[i],\n      symbolHighlight: this.state.symbolHighlight[i],\n      symbolClicked: () => this.handleClick(i),\n      showFeedback: this.state.showFeedback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    });\n  }\n\n  renderConf() {\n    if (this.state.showConf === true) {\n      // adapt later && this.state.participant_info.block_number>0\n      return /*#__PURE__*/React.createElement(ConfRate, {\n        confClicked: () => this.handleConf(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      });\n    } else {\n      return null;\n    }\n  } // let split handleClick in 2 parts: 1 will take care defining the choice and feedback after the click \n  // second one about displaying the feedback and passing to the next trial once confidence rating is given \n\n\n  handleConf(value) {\n    // i will be a confidence value here \n    console.log('Confidence value is:', value);\n    let confidence = this.state.confidence;\n    confidence.push(value);\n    this.setState({\n      showFeedback: true,\n      animation: true,\n      // verify\n      showConf: false,\n      confidence: confidence\n    }); // update symbol without Mutation\n\n    const newcount = this.state.block_info.trial_numb + 1;\n    const end_of_block = (newcount === this.state.block_info.TotalTrial ? true : false) ? true : false; // new symbols\n\n    const current_symbols = this.state.current_symbols.slice();\n    current_symbols[0] = this.state.pool_symbols[this.state.block_info.position[newcount] - 1];\n    current_symbols[1] = this.state.pool_symbols[2 - this.state.block_info.position[newcount]]; // start new block or update reset feedbacks for next trial (without mutation)\n\n    if (end_of_block) {\n      setTimeout(() => this.redirectToBlock(), 1000);\n    } else {\n      setTimeout(() => this.setState({\n        clickable: true,\n        feedback: Array(2).fill(null),\n        noFeedback: Array(2).fill('null'),\n        symbolHighlight: Array(2).fill('null'),\n        animation: true,\n        block_info: { ...this.state.block_info,\n          trial_numb: newcount\n        },\n        current_symbols: current_symbols,\n        showFeedback: false\n      }), 1000);\n    }\n  } // second one about displaying the feedback and passing to the next trial once confidence rating is given \n\n\n  handleClick(i) {\n    console.log('Click is:', i); // 0 if the left brick clicked and 1 if the right one  \n\n    if (this.state.clickable) {\n      const feedback = this.state.feedback.slice();\n      const noFeedback = this.state.noFeedback.slice();\n      const symbolHighlight = this.state.symbolHighlight.slice(); // complete feedback \n\n      if (this.state.block_info.block_feedback === \"2\") {\n        if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\") {\n          // symbol 1 is on the left\n          feedback[i] = this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 0) + this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 1);\n          feedback[1 - i] = this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 0) + this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 1);\n        } else {\n          // symbol 1 is on the right \n          feedback[i] = this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 1) + this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 0);\n          feedback[1 - i] = this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 1) + this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 0);\n        }\n\n        noFeedback[1 - i] = '';\n        noFeedback[i] = '';\n        symbolHighlight[i] = '';\n        symbolHighlight[1 - i] = 'null';\n      } else // partial feedback \n        {\n          if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\") {\n            feedback[i] = this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 0) + this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 1);\n          } else {\n            feedback[i] = this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 1) + this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 0);\n          }\n\n          feedback[1 - i] = null; // unchosen option this will work for the partial feedback\n\n          noFeedback[1 - i] = 'null';\n          noFeedback[i] = '';\n          symbolHighlight[i] = '';\n          symbolHighlight[1 - i] = 'null';\n        }\n\n      this.setState({\n        feedback: feedback,\n        clickable: false,\n        animation: false,\n        noFeedback: noFeedback,\n        symbolHighlight: symbolHighlight,\n        showConf: true\n      }); // save information\n\n      let position = i === 0 ? 'left' : 'right';\n      let chosen_positions = this.state.chosen_positions;\n      chosen_positions.push(position); // chosen_symbol :  \n\n      let chosen_symbols = this.state.chosen_symbols;\n\n      if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\" & i === 0) {\n        var chosen_symbol = 1;\n      } else if (this.state.block_info.position[this.state.block_info.trial_numb] === \"2\" & i === 1) {\n        var chosen_symbol = 1;\n      } else {\n        var chosen_symbol = 2;\n      }\n\n      chosen_symbols.push(chosen_symbol); // console.log('Chosen_symbol',chosen_symbols)\n\n      const chosen_r_th = chosen_symbol === 1 ? this.state.block_info.th_reward_1[this.state.block_info.trial_numb] : this.state.block_info.th_reward_2[this.state.block_info.trial_numb];\n      const unchosen_r_th = chosen_symbol === 1 ? this.state.block_info.th_reward_2[this.state.block_info.trial_numb] : this.state.block_info.th_reward_1[this.state.block_info.trial_numb];\n      const chosen_r = chosen_symbol === 1 ? this.state.block_info.reward_1[this.state.block_info.trial_numb] : this.state.block_info.reward_2[this.state.block_info.trial_numb];\n      const unchosen_r = chosen_symbol === 1 ? this.state.block_info.reward_2[this.state.block_info.trial_numb] : this.state.block_info.reward_1[this.state.block_info.trial_numb]; // console.log('Chosen reward theoretical',chosen_r_th)\n      // console.log('Unchosen reward theoretical',unchosen_r_th)\n      // console.log('Chosen reward',chosen_r)\n      // console.log('Unchosen reward',unchosen_r)\n      // console.log('Observed chosen feedback',feedback[i])\n      // console.log('Observed unchosen feedback',feedback[1-i])\n\n      let block_perf = this.state.block_perf + (chosen_r_th - unchosen_r_th) / this.state.block_info.position.length;\n      let reaction_times = this.state.reaction_times;\n      var date = new Date();\n      let reaction_time = date.getTime() - this.prev_reaction_time_date;\n      this.prev_reaction_time_date = date.getTime();\n      reaction_times.push(reaction_time);\n      let chosen_rewards = this.state.chosen_rewards;\n      chosen_rewards.push(feedback[i]);\n      let unchosen_rewards = this.state.unchosen_rewards;\n      unchosen_rewards.push(feedback[1 - i]);\n      this.setState({\n        chosen_positions: chosen_positions,\n        chosen_symbols: chosen_symbols,\n        chosen_rewards: chosen_rewards,\n        unchosen_rewards: unchosen_rewards,\n        reaction_times: reaction_times,\n        block_perf: block_perf\n      });\n    }\n  }\n\n  redirectToBlock() // Compute the block relative performance: \n  {\n    let block_id = this.state.block_info.block_number;\n    console.log('Board date time', this.state.participant_info.date_time);\n    let body = {\n      'block_number': this.state.participant_info.block_number + 1,\n      'chosen_positions': this.state.chosen_positions,\n      'chosen_symbols': this.state.chosen_symbols,\n      'chosen_rewards': this.state.chosen_rewards,\n      'unchosen_rewards': this.state.unchosen_rewards,\n      'reaction_times': this.state.reaction_times,\n      'block_perf': this.state.block_perf,\n      'completed': 'yes',\n      'date': this.state.participant_info.date,\n      'date_time': this.state.participant_info.date_time,\n      'game_id': this.state.participant_info.game_id\n    };\n    fetch(`${API_URL}/participants_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    this.props.history.push({\n      pathname: `/Block`,\n      state: {\n        participant_info: this.state.participant_info,\n        newblock_frame: false\n      }\n    });\n  }\n\n  render() {\n    let status;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allBricks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"brick1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }\n    }, \" \", this.renderBrick(0), \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"brick2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }\n    }, \" \", this.renderBrick(1), \" \")), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }\n    }, \" \", this.renderConf())));\n  }\n\n}\n\nexport default withRouter(Board);","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/Board/Board.js"],"names":["React","Brick","ConfRate","API_URL","withRouter","CSSTransitionGroup","Board","Component","constructor","props","participant_info","location","state","block_info","pool_symbols","current_symbols","position","clickable","animation","feedback","Array","fill","noFeedback","symbolHighlight","error","chosen_rewards","unchosen_rewards","block_perf","chosen_symbols","chosen_positions","reaction_times","completed","showFeedback","showConf","confidence","reaction_times_conf","redirectToBlock","bind","time_date_first","Date","prev_reaction_time_date","getTime","renderBrick","i","handleClick","renderConf","handleConf","value","console","log","push","setState","newcount","trial_numb","end_of_block","TotalTrial","slice","setTimeout","block_feedback","reward_1","reward_2","chosen_symbol","chosen_r_th","th_reward_1","th_reward_2","unchosen_r_th","chosen_r","unchosen_r","length","date","reaction_time","block_id","block_number","date_time","body","game_id","fetch","participant_id","prolific_id","method","headers","JSON","stringify","history","pathname","newblock_frame","render","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Board.css';\nimport Brick from '../Brick/Brick.js'\nimport ConfRate from '../Confidence/ConfRateNew.js'\n\nimport { API_URL } from '../../config';\n// import { handleResponse } from '../helpers';\nimport {withRouter} from 'react-router-dom';\n\n// import { CSSTransitionGroup } from 'react-transition-group';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'; // for newer version \n\n\n\n\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n\n    const participant_info = this.props.location.state.participant_info\n    const block_info       = this.props.location.state.block_info\n    const pool_symbols     = this.props.location.state.pool_symbols\n\n    // console.log(block_info)\n    const current_symbols  = ['','']\n\n    \n    // Define intitial left and right symbols: \n    current_symbols[0]    = pool_symbols[block_info.position[0]-1] // 1 if on the right symbol 1, 0 if on the left \n    current_symbols[1]    = pool_symbols[2-block_info.position[0]] // \n\n    \n    this.state = {\n      clickable        : true, // freezing when subject has chosen a symbol\n      animation        : true, // relaunch fading animation after each trial\n      feedback         : Array(2).fill(null),\n      noFeedback       : ['null', 'null'],\n      symbolHighlight  : ['null', 'null'],\n      participant_info : participant_info,\n      block_info       : block_info,        \n      error            : '',\n      chosen_rewards   : [],\n      unchosen_rewards : [],\n      block_perf       : 0.0,\n      chosen_symbols   : [],\n      chosen_positions : [],\n      reaction_times   : [],\n      current_symbols  : current_symbols,\n      pool_symbols     : pool_symbols,  \n      completed        : 'no', \n      showFeedback     : false,\n      showConf         : false, \n      confidence       : [], \n      reaction_times_conf: []   \n    };\n\n    this.redirectToBlock.bind(this)\n    var time_date_first          = new Date()\n    this.prev_reaction_time_date = time_date_first.getTime()\n    // this._handleGoBack.bind(this);  TO IMPLEMENT LATER   \n    // this._handleRefresh.bind(this);\n  };  \n\n\n  renderBrick(i) {\n    return (\n      <Brick\n        symbol          = {this.state.current_symbols[i]}\n        feedback        = {this.state.feedback[i]}\n        animation       = {this.state.animation}\n        noFeedback      = {this.state.noFeedback[i]}\n        symbolHighlight = {this.state.symbolHighlight[i]}\n        symbolClicked   = {() => this.handleClick(i)}\n        showFeedback    = {this.state.showFeedback}\n      />\n    );\n  }\n\n\n  renderConf() {\n\n    if (this.state.showConf === true) { // adapt later && this.state.participant_info.block_number>0\n        return(\n          <ConfRate\n            confClicked = {() =>this.handleConf()}\n          />)\n        ;}\n    else {\n      return(null);}\n   }\n\n// let split handleClick in 2 parts: 1 will take care defining the choice and feedback after the click \n// second one about displaying the feedback and passing to the next trial once confidence rating is given \n  handleConf(value) { // i will be a confidence value here \n\n\n    console.log('Confidence value is:',value) \n\n    let confidence  = this.state.confidence; \n    confidence.push(value)\n\n\n    this.setState({\n      showFeedback: true, \n      animation: true, // verify\n      showConf: false,\n      confidence: confidence  \n    })\n\n\n    // update symbol without Mutation\n    const newcount     = this.state.block_info.trial_numb + 1\n    const end_of_block = (newcount === this.state.block_info.TotalTrial ? true : false ) ? true : false \n    \n    // new symbols\n    const current_symbols = this.state.current_symbols.slice();\n    current_symbols[0]    = this.state.pool_symbols[this.state.block_info.position[newcount] - 1]\n    current_symbols[1]    = this.state.pool_symbols[2-this.state.block_info.position[newcount]]\n\n\n      // start new block or update reset feedbacks for next trial (without mutation)\n      if (end_of_block){\n        setTimeout(() => this.redirectToBlock()\n                , 1000);        \n      }\n      else {\n        setTimeout(() => this.setState({\n          clickable  : true,\n          feedback   : Array(2).fill(null),\n          noFeedback : Array(2).fill('null'),\n          symbolHighlight: Array(2).fill('null'),\n          animation  : true,\n          block_info : {...this.state.block_info, trial_numb:newcount},\n          current_symbols : current_symbols,\n          showFeedback: false         \n        }), 1000);     \n      }\n    }\n  \n// second one about displaying the feedback and passing to the next trial once confidence rating is given \n  handleClick(i) {\n\n    console.log('Click is:',i) // 0 if the left brick clicked and 1 if the right one  \n    \n    if (this.state.clickable) {\n\n      const feedback        = this.state.feedback.slice();\n      const noFeedback      = this.state.noFeedback.slice();\n      const symbolHighlight = this.state.symbolHighlight.slice();\n      \n    // complete feedback \n    if (this.state.block_info.block_feedback===\"2\") {\n        if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\") {\n         // symbol 1 is on the left\n          feedback[i]   = this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===0) + this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===1)\n          feedback[1-i] = this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===0) + this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===1)\n        }\n        else {\n\n          // symbol 1 is on the right \n          feedback[i]   = this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===1) + this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===0)\n          feedback[1-i] = this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===1) + this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===0)\n       \n        }\n\n        noFeedback[1 - i]    = ''\n        noFeedback[i]        = ''\n        symbolHighlight[i]   = ''\n        symbolHighlight[1-i] = 'null'\n\n      }\n      else  // partial feedback \n      {\n        if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\") {\n\n          feedback[i]   = this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===0) + this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===1)\n       \n        }\n        else {\n          feedback[i]   = this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===1) + this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===0)\n          \n        }\n\n      feedback[1 - i]      = null // unchosen option this will work for the partial feedback\n      noFeedback[1 - i]    = 'null'\n      noFeedback[i]        = ''\n      symbolHighlight[i]   = ''\n      symbolHighlight[1-i] = 'null'\n    \n    }\n  \n      this.setState({        \n        feedback   : feedback,\n        clickable  : false,\n        animation  : false,\n        noFeedback : noFeedback,\n        symbolHighlight: symbolHighlight, \n        showConf: true, \n      })\n\n    \n      // save information\n      let position         = (i === 0) ? 'left' : 'right'; \n      let chosen_positions = this.state.chosen_positions;\n      chosen_positions.push(position)\n\n      // chosen_symbol :  \n      let chosen_symbols = this.state.chosen_symbols;\n      if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\" & (i === 0)) {\n          var chosen_symbol = 1\n        }\n      else if (this.state.block_info.position[this.state.block_info.trial_numb] === \"2\" & (i === 1)) {\n          var chosen_symbol = 1\n        }\n      else {\n        var chosen_symbol = 2\n      }\n\n      chosen_symbols.push(chosen_symbol)  \n      // console.log('Chosen_symbol',chosen_symbols)\n\n      const chosen_r_th   = chosen_symbol===1 ? this.state.block_info.th_reward_1[this.state.block_info.trial_numb] : this.state.block_info.th_reward_2[this.state.block_info.trial_numb];\n      const unchosen_r_th = chosen_symbol===1 ? this.state.block_info.th_reward_2[this.state.block_info.trial_numb] : this.state.block_info.th_reward_1[this.state.block_info.trial_numb];\n      \n      \n      const chosen_r   = chosen_symbol===1 ? this.state.block_info.reward_1[this.state.block_info.trial_numb] : this.state.block_info.reward_2[this.state.block_info.trial_numb];\n      const unchosen_r = chosen_symbol===1 ? this.state.block_info.reward_2[this.state.block_info.trial_numb] : this.state.block_info.reward_1[this.state.block_info.trial_numb];\n      \n      // console.log('Chosen reward theoretical',chosen_r_th)\n      // console.log('Unchosen reward theoretical',unchosen_r_th)\n\n      // console.log('Chosen reward',chosen_r)\n      // console.log('Unchosen reward',unchosen_r)\n\n      // console.log('Observed chosen feedback',feedback[i])\n      // console.log('Observed unchosen feedback',feedback[1-i])\n      \n      let block_perf = this.state.block_perf + ((chosen_r_th-unchosen_r_th)/this.state.block_info.position.length) \n\n      let reaction_times           = this.state.reaction_times;\n      var date                     = new Date()\n      let reaction_time            = date.getTime() - this.prev_reaction_time_date\n      this.prev_reaction_time_date = date.getTime()\n      reaction_times.push(reaction_time)\n\n      let chosen_rewards   = this.state.chosen_rewards; \n      chosen_rewards.push(feedback[i])\n\n      let unchosen_rewards = this.state.unchosen_rewards; \n      unchosen_rewards.push(feedback[1-i])\n\n      this.setState({        \n        chosen_positions : chosen_positions,\n        chosen_symbols   : chosen_symbols,\n        chosen_rewards   : chosen_rewards,\n        unchosen_rewards : unchosen_rewards, \n        reaction_times   : reaction_times,\n        block_perf       : block_perf \n      }) \n   }\n  }\n\n\n\n\n  redirectToBlock ()\n\n  // Compute the block relative performance: \n\n  {\n    let block_id   = this.state.block_info.block_number\n\n    console.log('Board date time',this.state.participant_info.date_time)\n    \n    let body     = {        'block_number'     : this.state.participant_info.block_number+1, \n                            'chosen_positions' : this.state.chosen_positions,\n                            'chosen_symbols'   : this.state.chosen_symbols,\n                            'chosen_rewards'   : this.state.chosen_rewards,\n                            'unchosen_rewards' : this.state.unchosen_rewards,\n                            'reaction_times'   : this.state.reaction_times,\n                            'block_perf'       : this.state.block_perf,\n                            'completed'        :'yes',\n                            'date'             : this.state.participant_info.date,\n                            'date_time'        : this.state.participant_info.date_time, \n                            'game_id'          : this.state.participant_info.game_id}\n    \n    fetch(`${API_URL}/participants_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n       method: 'POST',\n       headers: {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n       },\n       body: JSON.stringify(body)\n     })\n\n    this.props.history.push({\n      pathname: `/Block`,\n      state: {participant_info:this.state.participant_info, newblock_frame : false}\n    })    \n  }\n\n  render() {\n\n    let status;\n    return (\n      <div>\n      \n        <div  className=\"status\">{status}</div>\n        <div  className=\"allBricks\">\n        <span className='brick1'> {this.renderBrick(0)} </span>\n        <span className='brick2'> {this.renderBrick(1)} </span>\n        </div>\n      \n        <center>\n        <div className='conf'> {this.renderConf()}</div>\n        </center>\n      \n      </div>\n          );\n  }\n}\n\nexport default withRouter(Board);\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}