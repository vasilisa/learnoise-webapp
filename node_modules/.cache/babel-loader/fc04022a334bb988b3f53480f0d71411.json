{"ast":null,"code":"var _jsxFileName = \"/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/Board/Board.js\";\nimport React from 'react';\nimport './Board.css';\nimport Brick from '../Brick/Brick.js';\nimport ConfRate from '../Confidence/ConfRateNew.js';\nimport { API_URL } from '../../config'; // import { handleResponse } from '../helpers';\n\nimport { withRouter } from 'react-router-dom'; // import { CSSTransitionGroup } from 'react-transition-group';\n\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'; // for newer version \n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleConf = (conf, rt_conf) => {\n      // i will be a confidence value here \n      console.log('Confidence value is:', conf_value); // console.log('Reaction times for confidence is:',rt_conf) \n\n      let confidence = this.state.confidence; // let rt_confidence  = this.state.reaction_times_conf; \n\n      confidence.push(conf_value); // rt_confidence.push(rt_conf)\n\n      this.setState({\n        showFeedback: true,\n        animation: true,\n        // verify\n        showConf: false,\n        confidence: confidence // reaction_times_conf: rt_confidence  \n\n      }); // update symbol without Mutation\n\n      const newcount = this.state.block_info.trial_numb + 1;\n      const end_of_block = (newcount === this.state.block_info.TotalTrial ? true : false) ? true : false; // new symbols\n\n      const current_symbols = this.state.current_symbols.slice();\n      current_symbols[0] = this.state.pool_symbols[this.state.block_info.position[newcount] - 1];\n      current_symbols[1] = this.state.pool_symbols[2 - this.state.block_info.position[newcount]]; // start new block or update reset feedbacks for next trial (without mutation)\n\n      if (end_of_block) {\n        setTimeout(() => this.redirectToBlock(), 1000);\n      } else {\n        setTimeout(() => this.setState({\n          clickable: true,\n          feedback: Array(2).fill(null),\n          noFeedback: Array(2).fill('null'),\n          symbolHighlight: Array(2).fill('null'),\n          animation: true,\n          block_info: { ...this.state.block_info,\n            trial_numb: newcount\n          },\n          current_symbols: current_symbols,\n          showFeedback: false\n        }), 1000);\n      }\n    };\n\n    const participant_info = this.props.location.state.participant_info;\n    const block_info = this.props.location.state.block_info;\n    const pool_symbols = this.props.location.state.pool_symbols; // console.log(block_info)\n\n    const _current_symbols = ['', '']; // Define intitial left and right symbols: \n\n    _current_symbols[0] = pool_symbols[block_info.position[0] - 1]; // 1 if on the right symbol 1, 0 if on the left \n\n    _current_symbols[1] = pool_symbols[2 - block_info.position[0]]; // \n\n    this.state = {\n      clickable: true,\n      // freezing when subject has chosen a symbol\n      animation: true,\n      // relaunch fading animation after each trial\n      feedback: Array(2).fill(null),\n      noFeedback: ['null', 'null'],\n      symbolHighlight: ['null', 'null'],\n      participant_info: participant_info,\n      block_info: block_info,\n      error: '',\n      chosen_rewards: [],\n      unchosen_rewards: [],\n      block_perf: 0.0,\n      chosen_symbols: [],\n      chosen_positions: [],\n      reaction_times: [],\n      current_symbols: _current_symbols,\n      pool_symbols: pool_symbols,\n      completed: 'no',\n      showFeedback: false,\n      showConf: false,\n      confidence: [],\n      reaction_times_conf: []\n    };\n    this.redirectToBlock.bind(this);\n    var time_date_first = new Date();\n    this.prev_reaction_time_date = time_date_first.getTime(); // the beginning of the trial \n  }\n\n  renderBrick(i) {\n    return /*#__PURE__*/React.createElement(Brick, {\n      symbol: this.state.current_symbols[i],\n      feedback: this.state.feedback[i],\n      animation: this.state.animation,\n      noFeedback: this.state.noFeedback[i],\n      symbolHighlight: this.state.symbolHighlight[i],\n      symbolClicked: () => this.handleClick(i),\n      showFeedback: this.state.showFeedback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    });\n  }\n\n  renderConf() {\n    if (this.state.showConf === true) {\n      // adapt later && this.state.participant_info.block_number>0\n      return /*#__PURE__*/React.createElement(ConfRate, {\n        confClicked: this.handleConf,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      });\n    } else {\n      return null;\n    }\n  } // let split handleClick in 2 parts: 1 will take care defining the choice and feedback after the click \n  // second one about displaying the feedback and passing to the next trial once confidence rating is given \n\n\n  // second one about displaying the feedback and passing to the next trial once confidence rating is given \n  handleClick(i) {\n    console.log('Click is:', i); // 0 if the left brick clicked and 1 if the right one  \n\n    if (this.state.clickable) {\n      const feedback = this.state.feedback.slice();\n      const noFeedback = this.state.noFeedback.slice();\n      const symbolHighlight = this.state.symbolHighlight.slice(); // complete feedback \n\n      if (this.state.block_info.block_feedback === \"2\") {\n        if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\") {\n          // symbol 1 is on the left\n          feedback[i] = this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 0) + this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 1);\n          feedback[1 - i] = this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 0) + this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 1);\n        } else {\n          // symbol 1 is on the right \n          feedback[i] = this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 1) + this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 0);\n          feedback[1 - i] = this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 1) + this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 0);\n        }\n\n        noFeedback[1 - i] = '';\n        noFeedback[i] = '';\n        symbolHighlight[i] = '';\n        symbolHighlight[1 - i] = 'null';\n      } else // partial feedback \n        {\n          if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\") {\n            feedback[i] = this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 0) + this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 1);\n          } else {\n            feedback[i] = this.state.block_info.reward_1[this.state.block_info.trial_numb] * (i === 1) + this.state.block_info.reward_2[this.state.block_info.trial_numb] * (i === 0);\n          }\n\n          feedback[1 - i] = null; // unchosen option this will work for the partial feedback\n\n          noFeedback[1 - i] = 'null';\n          noFeedback[i] = '';\n          symbolHighlight[i] = '';\n          symbolHighlight[1 - i] = 'null';\n        }\n\n      this.setState({\n        feedback: feedback,\n        clickable: false,\n        animation: false,\n        noFeedback: noFeedback,\n        symbolHighlight: symbolHighlight,\n        showConf: true\n      }); // save information\n\n      let position = i === 0 ? 'left' : 'right';\n      let chosen_positions = this.state.chosen_positions;\n      chosen_positions.push(position); // chosen_symbol :  \n\n      let chosen_symbols = this.state.chosen_symbols;\n\n      if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\" & i === 0) {\n        var chosen_symbol = 1;\n      } else if (this.state.block_info.position[this.state.block_info.trial_numb] === \"2\" & i === 1) {\n        var chosen_symbol = 1;\n      } else {\n        var chosen_symbol = 2;\n      }\n\n      chosen_symbols.push(chosen_symbol); // console.log('Chosen_symbol',chosen_symbols)\n\n      const chosen_r_th = chosen_symbol === 1 ? this.state.block_info.th_reward_1[this.state.block_info.trial_numb] : this.state.block_info.th_reward_2[this.state.block_info.trial_numb];\n      const unchosen_r_th = chosen_symbol === 1 ? this.state.block_info.th_reward_2[this.state.block_info.trial_numb] : this.state.block_info.th_reward_1[this.state.block_info.trial_numb];\n      const chosen_r = chosen_symbol === 1 ? this.state.block_info.reward_1[this.state.block_info.trial_numb] : this.state.block_info.reward_2[this.state.block_info.trial_numb];\n      const unchosen_r = chosen_symbol === 1 ? this.state.block_info.reward_2[this.state.block_info.trial_numb] : this.state.block_info.reward_1[this.state.block_info.trial_numb]; // console.log('Chosen reward theoretical',chosen_r_th)\n      // console.log('Unchosen reward theoretical',unchosen_r_th)\n      // console.log('Chosen reward',chosen_r)\n      // console.log('Unchosen reward',unchosen_r)\n      // console.log('Observed chosen feedback',feedback[i])\n      // console.log('Observed unchosen feedback',feedback[1-i])\n\n      let block_perf = this.state.block_perf + (chosen_r_th - unchosen_r_th) / this.state.block_info.position.length;\n      let reaction_times = this.state.reaction_times;\n      var date = new Date();\n      let reaction_time = date.getTime() - this.prev_reaction_time_date; // choice reaction time \n\n      this.prev_reaction_time_date = date.getTime();\n      reaction_times.push(reaction_time);\n      let chosen_rewards = this.state.chosen_rewards;\n      chosen_rewards.push(feedback[i]);\n      let unchosen_rewards = this.state.unchosen_rewards;\n      unchosen_rewards.push(feedback[1 - i]);\n      this.setState({\n        chosen_positions: chosen_positions,\n        chosen_symbols: chosen_symbols,\n        chosen_rewards: chosen_rewards,\n        unchosen_rewards: unchosen_rewards,\n        reaction_times: reaction_times,\n        block_perf: block_perf\n      });\n    }\n  }\n\n  redirectToBlock() // Compute the block relative performance: \n  {\n    let block_id = this.state.block_info.block_number;\n    let body = {\n      'block_number': this.state.participant_info.block_number + 1,\n      'chosen_positions': this.state.chosen_positions,\n      'chosen_symbols': this.state.chosen_symbols,\n      'chosen_rewards': this.state.chosen_rewards,\n      'unchosen_rewards': this.state.unchosen_rewards,\n      'reaction_times': this.state.reaction_times,\n      'block_perf': this.state.block_perf,\n      'completed': 'yes',\n      'date': this.state.participant_info.date,\n      'date_time': this.state.participant_info.date_time,\n      'game_id': this.state.participant_info.game_id\n    };\n    fetch(`${API_URL}/participants_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    this.props.history.push({\n      pathname: `/Block`,\n      state: {\n        participant_info: this.state.participant_info,\n        newblock_frame: false\n      }\n    });\n  }\n\n  render() {\n    let status;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"allBricks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"brick1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }\n    }, \" \", this.renderBrick(0), \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"brick2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }\n    }, \" \", this.renderBrick(1), \" \")), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"conf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }\n    }, \" \", this.renderConf())));\n  }\n\n}\n\nexport default withRouter(Board);","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/Board/Board.js"],"names":["React","Brick","ConfRate","API_URL","withRouter","CSSTransitionGroup","Board","Component","constructor","props","handleConf","conf","rt_conf","console","log","conf_value","confidence","state","push","setState","showFeedback","animation","showConf","newcount","block_info","trial_numb","end_of_block","TotalTrial","current_symbols","slice","pool_symbols","position","setTimeout","redirectToBlock","clickable","feedback","Array","fill","noFeedback","symbolHighlight","participant_info","location","error","chosen_rewards","unchosen_rewards","block_perf","chosen_symbols","chosen_positions","reaction_times","completed","reaction_times_conf","bind","time_date_first","Date","prev_reaction_time_date","getTime","renderBrick","i","handleClick","renderConf","block_feedback","reward_1","reward_2","chosen_symbol","chosen_r_th","th_reward_1","th_reward_2","unchosen_r_th","chosen_r","unchosen_r","length","date","reaction_time","block_id","block_number","body","date_time","game_id","fetch","participant_id","prolific_id","method","headers","JSON","stringify","history","pathname","newblock_frame","render","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Board.css';\nimport Brick from '../Brick/Brick.js'\nimport ConfRate from '../Confidence/ConfRateNew.js'\n\nimport { API_URL } from '../../config';\n// import { handleResponse } from '../helpers';\nimport {withRouter} from 'react-router-dom';\n\n// import { CSSTransitionGroup } from 'react-transition-group';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'; // for newer version \n\n\n\n\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n\n    const participant_info = this.props.location.state.participant_info\n    const block_info       = this.props.location.state.block_info\n    const pool_symbols     = this.props.location.state.pool_symbols\n\n    // console.log(block_info)\n    const current_symbols  = ['','']\n\n    \n    // Define intitial left and right symbols: \n    current_symbols[0]    = pool_symbols[block_info.position[0]-1] // 1 if on the right symbol 1, 0 if on the left \n    current_symbols[1]    = pool_symbols[2-block_info.position[0]] // \n\n    \n    this.state = {\n      clickable        : true, // freezing when subject has chosen a symbol\n      animation        : true, // relaunch fading animation after each trial\n      feedback         : Array(2).fill(null),\n      noFeedback       : ['null', 'null'],\n      symbolHighlight  : ['null', 'null'],\n      participant_info : participant_info,\n      block_info       : block_info,        \n      error            : '',\n      chosen_rewards   : [],\n      unchosen_rewards : [],\n      block_perf       : 0.0,\n      chosen_symbols   : [],\n      chosen_positions : [],\n      reaction_times   : [],\n      current_symbols  : current_symbols,\n      pool_symbols     : pool_symbols,  \n      completed        : 'no', \n      showFeedback     : false,\n      showConf         : false, \n      confidence       : [], \n      reaction_times_conf: []   \n    };\n\n    this.redirectToBlock.bind(this)\n    var time_date_first          = new Date()\n    this.prev_reaction_time_date = time_date_first.getTime() // the beginning of the trial \n  };  \n\n\n  renderBrick(i) {\n    return (\n      <Brick\n        symbol          = {this.state.current_symbols[i]}\n        feedback        = {this.state.feedback[i]}\n        animation       = {this.state.animation}\n        noFeedback      = {this.state.noFeedback[i]}\n        symbolHighlight = {this.state.symbolHighlight[i]}\n        symbolClicked   = {() => this.handleClick(i)}\n        showFeedback    = {this.state.showFeedback}\n      />\n    );\n  }\n\n\n  renderConf() {\n\n    if (this.state.showConf === true) { // adapt later && this.state.participant_info.block_number>0\n        return(\n          <ConfRate\n            confClicked = {this.handleConf}\n          />)\n        ;}\n    else {\n      return(null);}\n   }\n\n// let split handleClick in 2 parts: 1 will take care defining the choice and feedback after the click \n// second one about displaying the feedback and passing to the next trial once confidence rating is given \n  handleConf = (conf,rt_conf) =>  { // i will be a confidence value here \n\n\n    console.log('Confidence value is:',conf_value) \n    // console.log('Reaction times for confidence is:',rt_conf) \n    \n\n\n    let confidence     = this.state.confidence; \n    // let rt_confidence  = this.state.reaction_times_conf; \n\n    confidence.push(conf_value)\n    // rt_confidence.push(rt_conf)\n\n\n    this.setState({\n      showFeedback: true, \n      animation: true, // verify\n      showConf: false,\n      confidence: confidence, \n      // reaction_times_conf: rt_confidence  \n    })\n\n\n    // update symbol without Mutation\n    const newcount     = this.state.block_info.trial_numb + 1\n    const end_of_block = (newcount === this.state.block_info.TotalTrial ? true : false ) ? true : false \n    \n    // new symbols\n    const current_symbols = this.state.current_symbols.slice();\n    current_symbols[0]    = this.state.pool_symbols[this.state.block_info.position[newcount] - 1]\n    current_symbols[1]    = this.state.pool_symbols[2-this.state.block_info.position[newcount]]\n\n\n      // start new block or update reset feedbacks for next trial (without mutation)\n      if (end_of_block){\n        setTimeout(() => this.redirectToBlock()\n                , 1000);        \n      }\n      else {\n        setTimeout(() => this.setState({\n          clickable  : true,\n          feedback   : Array(2).fill(null),\n          noFeedback : Array(2).fill('null'),\n          symbolHighlight: Array(2).fill('null'),\n          animation  : true,\n          block_info : {...this.state.block_info, trial_numb:newcount},\n          current_symbols : current_symbols,\n          showFeedback: false         \n        }), 1000);     \n      }\n    }\n  \n// second one about displaying the feedback and passing to the next trial once confidence rating is given \n  handleClick(i) {\n\n    console.log('Click is:',i) // 0 if the left brick clicked and 1 if the right one  \n    \n    if (this.state.clickable) {\n\n      const feedback        = this.state.feedback.slice();\n      const noFeedback      = this.state.noFeedback.slice();\n      const symbolHighlight = this.state.symbolHighlight.slice();\n      \n    // complete feedback \n    if (this.state.block_info.block_feedback===\"2\") {\n        if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\") {\n         // symbol 1 is on the left\n          feedback[i]   = this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===0) + this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===1)\n          feedback[1-i] = this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===0) + this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===1)\n        }\n        else {\n\n          // symbol 1 is on the right \n          feedback[i]   = this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===1) + this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===0)\n          feedback[1-i] = this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===1) + this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===0)\n       \n        }\n\n        noFeedback[1 - i]    = ''\n        noFeedback[i]        = ''\n        symbolHighlight[i]   = ''\n        symbolHighlight[1-i] = 'null'\n\n      }\n      else  // partial feedback \n      {\n        if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\") {\n\n          feedback[i]   = this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===0) + this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===1)\n       \n        }\n        else {\n          feedback[i]   = this.state.block_info.reward_1[this.state.block_info.trial_numb]*(i===1) + this.state.block_info.reward_2[this.state.block_info.trial_numb]*(i===0)\n          \n        }\n\n      feedback[1 - i]      = null // unchosen option this will work for the partial feedback\n      noFeedback[1 - i]    = 'null'\n      noFeedback[i]        = ''\n      symbolHighlight[i]   = ''\n      symbolHighlight[1-i] = 'null'\n    \n    }\n  \n      this.setState({        \n        feedback   : feedback,\n        clickable  : false,\n        animation  : false,\n        noFeedback : noFeedback,\n        symbolHighlight: symbolHighlight, \n        showConf: true, \n      })\n\n    \n      // save information\n      let position         = (i === 0) ? 'left' : 'right'; \n      let chosen_positions = this.state.chosen_positions;\n      chosen_positions.push(position)\n\n      // chosen_symbol :  \n      let chosen_symbols = this.state.chosen_symbols;\n      if (this.state.block_info.position[this.state.block_info.trial_numb] === \"1\" & (i === 0)) {\n          var chosen_symbol = 1\n        }\n      else if (this.state.block_info.position[this.state.block_info.trial_numb] === \"2\" & (i === 1)) {\n          var chosen_symbol = 1\n        }\n      else {\n        var chosen_symbol = 2\n      }\n\n      chosen_symbols.push(chosen_symbol)  \n      // console.log('Chosen_symbol',chosen_symbols)\n\n      const chosen_r_th   = chosen_symbol===1 ? this.state.block_info.th_reward_1[this.state.block_info.trial_numb] : this.state.block_info.th_reward_2[this.state.block_info.trial_numb];\n      const unchosen_r_th = chosen_symbol===1 ? this.state.block_info.th_reward_2[this.state.block_info.trial_numb] : this.state.block_info.th_reward_1[this.state.block_info.trial_numb];\n      \n      \n      const chosen_r   = chosen_symbol===1 ? this.state.block_info.reward_1[this.state.block_info.trial_numb] : this.state.block_info.reward_2[this.state.block_info.trial_numb];\n      const unchosen_r = chosen_symbol===1 ? this.state.block_info.reward_2[this.state.block_info.trial_numb] : this.state.block_info.reward_1[this.state.block_info.trial_numb];\n      \n      // console.log('Chosen reward theoretical',chosen_r_th)\n      // console.log('Unchosen reward theoretical',unchosen_r_th)\n\n      // console.log('Chosen reward',chosen_r)\n      // console.log('Unchosen reward',unchosen_r)\n\n      // console.log('Observed chosen feedback',feedback[i])\n      // console.log('Observed unchosen feedback',feedback[1-i])\n      \n      let block_perf = this.state.block_perf + ((chosen_r_th-unchosen_r_th)/this.state.block_info.position.length) \n\n      let reaction_times           = this.state.reaction_times;\n      var date                     = new Date()\n      let reaction_time            = date.getTime() - this.prev_reaction_time_date // choice reaction time \n      this.prev_reaction_time_date = date.getTime()\n      reaction_times.push(reaction_time)\n\n      let chosen_rewards   = this.state.chosen_rewards; \n      chosen_rewards.push(feedback[i])\n\n      let unchosen_rewards = this.state.unchosen_rewards; \n      unchosen_rewards.push(feedback[1-i])\n\n      this.setState({        \n        chosen_positions : chosen_positions,\n        chosen_symbols   : chosen_symbols,\n        chosen_rewards   : chosen_rewards,\n        unchosen_rewards : unchosen_rewards, \n        reaction_times   : reaction_times,\n        block_perf       : block_perf, \n\n      }) \n   }\n  }\n\n\n\n\n  redirectToBlock ()\n\n  // Compute the block relative performance: \n\n  {\n    let block_id   = this.state.block_info.block_number\n\n    let body     = {        'block_number'     : this.state.participant_info.block_number+1, \n                            'chosen_positions' : this.state.chosen_positions,\n                            'chosen_symbols'   : this.state.chosen_symbols,\n                            'chosen_rewards'   : this.state.chosen_rewards,\n                            'unchosen_rewards' : this.state.unchosen_rewards,\n                            'reaction_times'   : this.state.reaction_times,\n                            'block_perf'       : this.state.block_perf,\n                            'completed'        :'yes',\n                            'date'             : this.state.participant_info.date,\n                            'date_time'        : this.state.participant_info.date_time, \n                            'game_id'          : this.state.participant_info.game_id}\n    \n    fetch(`${API_URL}/participants_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n       method: 'POST',\n       headers: {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n       },\n       body: JSON.stringify(body)\n     })\n\n    this.props.history.push({\n      pathname: `/Block`,\n      state: {participant_info:this.state.participant_info, newblock_frame : false}\n    })    \n  }\n\n  render() {\n\n    let status;\n    return (\n      <div>\n      \n        <div  className=\"status\">{status}</div>\n        <div  className=\"allBricks\">\n        <span className='brick1'> {this.renderBrick(0)} </span>\n        <span className='brick2'> {this.renderBrick(1)} </span>\n        </div>\n      \n        <center>\n        <div className='conf'> {this.renderConf()}</div>\n        </center>\n      \n      </div>\n          );\n  }\n}\n\nexport default withRouter(Board);\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}