{"ast":null,"code":"var _jsxFileName = \"/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/Instructions/Instructions.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { API_URL } from '../../config';\nimport { handleResponse } from '../helpers';\nimport './Instructions.css';\n/*\nInstruction component is created when the particpant accepts terms and conditions and proceeds to the experiment. \nIt loads the participant id, and the block configurations that will be played during the game. \n*/\n\nclass Instructions extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.redirectToTarget = () => {\n      this.props.history.push({\n        pathname: `/Block`,\n        state: {\n          participant_info: this.state,\n          newblock_frame: this.state.newblock_frame\n        }\n      });\n    };\n\n    const participant_info = this.props.location.state.participant_info;\n    console.log('Participant info from props', participant_info);\n    this.state = {\n      participant_id: this.props.location.state.participant_info.prolific_id,\n      // default\n      date_time: this.props.location.state.participant_info.date_time,\n      date: this.props.location.state.participant_info.date,\n      block_number_survey: this.props.location.state.participant_info,\n      // not sure it should go here ! \n      survey_list: this.props.location.state.participant_info.survey_list,\n      game_id: '',\n      // to be fetched \n      TotalBlock: 5,\n      block_number: 0,\n      currentInstructionText: 1,\n      newblock_frame: true,\n      readyToProceed: false,\n      redirect: false\n    };\n    console.log('Instructions', this.state);\n    this.handleInstructionsLocal = this.handleInstructionsLocal.bind(this); // bind the method to avoid error on frames collapsed\n    // this.fetchParticipantInfo.bind(this); \n\n    this.fetchParticipantGameId.bind(this);\n  }\n\n  // Mount the component to call the BACKEND and GET the information\n  componentWillMount() {\n    document.body.style.background = \"fff\"; // this.fetchParticipantInfo();\n  } // fetchParticipantInfo () {\n  //      fetch(`${API_URL}/participants_data/last_participant_id`) \n  //        .then(handleResponse)\n  //        .then((data) => {\n  //          const participant_id_ = parseInt(data['new_participant_id'])\n  //          this.setState({\n  //                  participant_id : participant_id_,\n  //              });\n  //          this.fetchParticipantGameId(participant_id_)\n  //      })\n  //        .catch((error) => {\n  //         console.log(error)\n  //      });\n  //     }\n  // Based on the participant ID, determine the game_id and then fetch the game specifications \n\n\n  fetchParticipantGameId() {\n    fetch(`${API_URL}/participants_game/` + this.state.participant_id + '/' + this.state.prolific_id + '/' + this.state.date).then(handleResponse).then(data => {\n      const game_id_ = parseInt(data['game_id']);\n      this.setState({\n        game_id: game_id_\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  } // Transition between the instruction screens   \n\n\n  handleInstructionsLocal(event) {\n    var curText = this.state.currentInstructionText;\n    var whichButton = event.currentTarget.id;\n\n    if (whichButton === \"left\" && curText > 1) {\n      this.setState({\n        currentInstructionText: curText - 1\n      });\n    } else if (whichButton === \"right\" && curText < 5) {\n      this.setState({\n        currentInstructionText: curText + 1\n      });\n    }\n\n    if (whichButton === \"right\" && curText === 3) {\n      this.setState({\n        readyToProceed: true\n      });\n    }\n  } // change the router type to pass the props to the child component \n\n\n  render() {\n    let mytext;\n\n    if (this.state.currentInstructionText === 1) {\n      mytext = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"textbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 22\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 48\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 55\n        }\n      }, \"You will play a \\u2018slot machine\\u2019 game.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 16\n        }\n      }, \"Your goal is to win as many points as you can\"), \".\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }\n      }, \" Your final payoff will depend on your choices. At the end of the experiment, we will calculate the cumulative number of points you won and translate them into real money.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, \"You could earn between \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 39\n        }\n      }, \"0.5 \\xA3\"), \" and \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 84\n        }\n      }, \"1.0 \\xA3\"), \" as a bonus.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, \"The game will be divided in 4 short blocks and will last approximately \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 87\n        }\n      }, \"20 min.\")));\n    } else if (this.state.currentInstructionText === 2) {\n      mytext = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"textbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 18\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 44\n        }\n      }), \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 52\n        }\n      }, \"At each trial, you will choose between two slot machines depicted by colored shapes.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"translate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 20\n        }\n      }, \"Be aware\"), \":\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }\n      }, \"each slot machine is identified by its colored shape, and not by its position on the screen.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"symbolframe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_0_grate_None_color_3.png'),\n        alt: \"introsymbol\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_2_grate_None_color_0.png'),\n        alt: \"introsymbol\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }\n      }, \" The number of points won (between 1 and 99) will appear below the colored shape that you have chosen.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      }, \"In certain blocks you will also see the points associated with the slot machine that you have not chosen.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }\n      }, \"However, you will only win the points of the slot machine that you have chosen.\"));\n    } else if (this.state.currentInstructionText === 3) {\n      mytext = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"textbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 22\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 48\n        }\n      }), \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 56\n        }\n      }, \" The average payoffs of the two slot machines change over time.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }, \"The game consists in finding out which of the two slot machines is \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 83\n        }\n      }, \"currently\"), \" more rewarding.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 16\n        }\n      }, \"Be aware:\"), \" the outcome of each slot machine varies around its average value from trial to trial.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }, \"For example, a slot machine can bring more than 50 points on average but less than 50 points on a particular trial, and vice versa.\"));\n    } else if (this.state.currentInstructionText === 4) {\n      mytext = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"textbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 22\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 48\n        }\n      }), \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 56\n        }\n      }, \"There is \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 68\n        }\n      }, \"always\"), \" a slot machine that gives \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 131\n        }\n      }, \"currenty\"), \" more points on average then the other one.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }\n      }, \" This will be the case during a certain period of time (what we call an episode).\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }\n      }, \"You do not know how long the episode would last but you can get a sense of it by trying to remind the outcomes of the slot machines in the nearest past.\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center translate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"InstructText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 34\n      }\n    }, \"INSTRUCTIONS\"))), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"instructionsButtonContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, this.state.currentInstructionText > 1 ?\n    /*#__PURE__*/\n    // id helps get which button was clicked to handle the \n    React.createElement(Button, {\n      id: \"left\",\n      className: \"buttonInstructions\",\n      onClick: this.handleInstructionsLocal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 29\n      }\n    }, \"\\u2190\")) : /*#__PURE__*/React.createElement(Button, {\n      id: \"left\",\n      className: \"buttonInstructionsHidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 29\n      }\n    }, \"\\u2190\")), this.state.currentInstructionText < 4 ? /*#__PURE__*/React.createElement(Button, {\n      id: \"right\",\n      className: \"buttonInstructions\",\n      onClick: this.handleInstructionsLocal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 29\n      }\n    }, \"\\u2192\")) : /*#__PURE__*/React.createElement(Button, {\n      id: \"right\",\n      className: \"buttonInstructionsHidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 29\n      }\n    }, \"\\u2192\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, mytext), this.state.readyToProceed ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonInstruction\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"textbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }, \" When you are ready, start the training\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 99\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: \"buttonInstructionStart\",\n      onClick: () => this.redirectToTarget(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"bold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    }, \"START\")))) : null)))));\n  }\n\n}\n\nexport default withRouter(Instructions);","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/Instructions/Instructions.js"],"names":["React","withRouter","Button","API_URL","handleResponse","Instructions","Component","constructor","props","redirectToTarget","history","push","pathname","state","participant_info","newblock_frame","location","console","log","participant_id","prolific_id","date_time","date","block_number_survey","survey_list","game_id","TotalBlock","block_number","currentInstructionText","readyToProceed","redirect","handleInstructionsLocal","bind","fetchParticipantGameId","componentWillMount","document","body","style","background","fetch","then","data","game_id_","parseInt","setState","catch","error","event","curText","whichButton","currentTarget","id","render","mytext","require"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {withRouter} from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\n\nimport { API_URL } from '../../config';\nimport { handleResponse } from '../helpers';\nimport './Instructions.css';\n\n\n/*\nInstruction component is created when the particpant accepts terms and conditions and proceeds to the experiment. \nIt loads the participant id, and the block configurations that will be played during the game. \n*/\n\nclass Instructions extends React.Component {\n    constructor(props) {\n        super(props);\n\n\n        const participant_info = this.props.location.state.participant_info\n  \n        console.log('Participant info from props', participant_info)\n\n        this.state = {\n            participant_id : this.props.location.state.participant_info.prolific_id, // default\n            date_time: this.props.location.state.participant_info.date_time, \n            date: this.props.location.state.participant_info.date, \n            block_number_survey: this.props.location.state.participant_info, // not sure it should go here ! \n            survey_list: this.props.location.state.participant_info.survey_list, \n            game_id : '',       // to be fetched \n            TotalBlock: 5,\n            block_number: 0,  \n            currentInstructionText: 1,\n            newblock_frame : true, \n            readyToProceed: false,\n            redirect: false,\n        }\n\n    console.log('Instructions', this.state)\n\n    this.handleInstructionsLocal = this.handleInstructionsLocal.bind(this) // bind the method to avoid error on frames collapsed\n    // this.fetchParticipantInfo.bind(this); \n    this.fetchParticipantGameId.bind(this); \n       \n    }; \n\n    // Mount the component to call the BACKEND and GET the information\n    componentWillMount() {\n    document.body.style.background = \"fff\";  \n    // this.fetchParticipantInfo();\n    } \n    \n    // fetchParticipantInfo () {\n    //      fetch(`${API_URL}/participants_data/last_participant_id`) \n    //        .then(handleResponse)\n    //        .then((data) => {\n    //          const participant_id_ = parseInt(data['new_participant_id'])\n             \n    //          this.setState({\n    //                  participant_id : participant_id_,\n    //              });\n    //          this.fetchParticipantGameId(participant_id_)\n    //      })\n    //        .catch((error) => {\n    //         console.log(error)\n    //      });\n    //     }\n\n    // Based on the participant ID, determine the game_id and then fetch the game specifications \n    fetchParticipantGameId() {\n\n        fetch(`${API_URL}/participants_game/`+this.state.participant_id +'/'+this.state.prolific_id +'/'+this.state.date) \n           .then(handleResponse)\n           .then((data) => {\n             const game_id_ = parseInt(data['game_id'])\n             this.setState({\n                     game_id : game_id_,\n                 });\n         })\n           .catch((error) => {\n            console.log(error)\n         });\n        }\n\n    // Transition between the instruction screens   \n    handleInstructionsLocal(event){\n        var curText     = this.state.currentInstructionText;\n        var whichButton = event.currentTarget.id;\n    \n        if(whichButton===\"left\" && curText > 1){\n        this.setState({currentInstructionText: curText-1});\n        }\n        else if(whichButton===\"right\" && curText < 5){\n      \n        this.setState({currentInstructionText: curText+1});\n        }\n        if(whichButton===\"right\" && curText === 3){\n        this.setState({readyToProceed: true});\n        }\n    }\n\n    // change the router type to pass the props to the child component \n    redirectToTarget = () => {\n\n    this.props.history.push({\n       pathname: `/Block`,  \n       state: {participant_info: this.state, newblock_frame:this.state.newblock_frame} \n     })\n    }\n\n\n    render() {\n        let mytext\n        if (this.state.currentInstructionText===1) {\n            mytext = <div className='textbox'> <p></p><p>You will play a ‘slot machine’ game.</p>\n            <p><span className=\"bold\">Your goal is to win as many points as you can</span>.</p>\n            <p> Your final payoff will depend on your choices. At the end of the experiment, we will calculate the cumulative number of points you won and translate them into real money.</p> \n            <p>You could earn between <span className=\"bold\">0.5 &#163;</span> and <span className=\"bold\">1.0 &#163;</span> as a bonus.</p> \n            <p>The game will be divided in 4 short blocks and will last approximately <span className=\"bold\">20 min.</span></p></div>;\n        }\n\n        else if (this.state.currentInstructionText===2) {\n        mytext = <div className='textbox'> <p></p> <p>At each trial, you will choose between two slot machines depicted by colored shapes.</p> \n                <div className=\"translate\"/>\n                <p><span className=\"bold\">Be aware</span>:</p>\n                <p>each slot machine is identified by its colored shape, and not by its position on the screen.</p>\n                <div className=\"symbolframe\">    \n                    <img className=\"introsymbol\"  src={require('../../images/symbol_shape_0_grate_None_color_3.png')} alt='introsymbol'/> \n                    <img className=\"introsymbol\"  src={require('../../images/symbol_shape_2_grate_None_color_0.png')} alt='introsymbol'/> \n                </div>\n                <p> The number of points won (between 1 and 99) will appear below the colored shape that you have chosen.</p>\n                <p>In certain blocks you will also see the points associated with the slot machine that you have not chosen.</p>\n                <p>However, you will only win the points of the slot machine that you have chosen.</p>\n                </div>\n            }\n\n        else if (this.state.currentInstructionText===3) {\n            mytext = <div className='textbox'> <p></p> <p> The average payoffs of the two slot machines change over time.</p>\n            <p>The game consists in finding out which of the two slot machines is <span className=\"bold\">currently</span> more rewarding.</p>\n            <p><span className=\"bold\">Be aware:</span> the outcome of each slot machine varies around its average value from trial to trial.</p> \n            <p>For example, a slot machine can bring more than 50 points on average but less than 50 points on a particular trial, and vice versa.</p>\n            </div>;\n        }\n        else if (this.state.currentInstructionText===4) {\n            mytext = <div className='textbox'> <p></p> <p>There is <span className=\"bold\">always</span> a slot machine that gives <span className=\"bold\">currenty</span> more points on average then the other one.</p>\n            <p> This will be the case during a certain period of time (what we call an episode).</p>\n            <p>You do not know how long the episode would last but you can get a sense of it by trying to remind the outcomes of the slot machines in the nearest past.</p>\n            </div>;\n        }\n\n        return (\n            <div>\n            <div className=\"center translate\">\n            <div className=\"InstructText\">\n            <center> \n            <p className='title'><span className=\"bold\">INSTRUCTIONS</span></p>\n            </center>\n                <center> \n                <div className=\"instructionsButtonContainer\">\n\n                    {this.state.currentInstructionText > 1 ? // id helps get which button was clicked to handle the \n\n                        <Button id=\"left\" className=\"buttonInstructions\" onClick={this.handleInstructionsLocal}> \n                            <span className=\"bold\">&#8592;</span>\n                        </Button>\n                        :\n                        <Button id=\"left\" className=\"buttonInstructionsHidden\">\n                            <span className=\"bold\">&#8592;</span>\n                        </Button>\n                    }\n\n                    {this.state.currentInstructionText < 4 ?\n                        <Button id=\"right\" className=\"buttonInstructions\" onClick={this.handleInstructionsLocal}>\n                            <span className=\"bold\">&#8594;</span>\n                        </Button>\n                        :\n                        <Button id=\"right\" className=\"buttonInstructionsHidden\">\n                            <span className=\"bold\">&#8594;</span>\n                        </Button>\n                    }\n\n                    <div>\n                        {mytext}\n                    </div>\n                    {this.state.readyToProceed ?\n                    <div className=\"buttonInstruction\">\n                    <center>\n                        <label className='textbox'> When you are ready, start the training</label><br/>\n                        <Button className=\"buttonInstructionStart\" onClick={()=>this.redirectToTarget()}>\n                            <span className=\"bold\">START</span>\n                        </Button>\n                    </center>\n                    \n                    </div>\n                    : null}\n\n            </div>\n        </center>\n        </div>\n        </div>\n        </div>\n        ) \n    }\n}\n\nexport default withRouter(Instructions);\n"]},"metadata":{},"sourceType":"module"}