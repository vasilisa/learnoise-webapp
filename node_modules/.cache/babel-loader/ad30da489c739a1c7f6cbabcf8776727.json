{"ast":null,"code":"import _defineProperty from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/src/components/CheckboxQuiz/CheckboxQuiz.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../QuizQuestion/Question';\nimport QuestionCount from '../QuizQuestion/QuestionCount';\nimport Checkbox from '../Checkbox/Checkbox';\n\nvar CheckboxQuiz =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CheckboxQuiz, _React$Component);\n\n  function CheckboxQuiz(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxQuiz);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxQuiz).call(this, props));\n    var options = {};\n    var answers = {}; // Object.keys(this.props.answerOptions).map(function(key, index) {\n    //      // options[key] = false; // mybe to change to type\n    //      options[key.type] = false; // mybe to change to type \n    //    });\n\n    for (var key in _this.props.answerOptions) {\n      console.log(key);\n      options[_this.props.answerOptions[key].type] = false; // this.props.answerOptions[key].type\n\n      answers[_this.props.answerOptions[key].type] = _this.props.answerOptions[key].content;\n    }\n\n    _this.state = {\n      report: '',\n      shouldBlockNavigation: false,\n      checkboxes: options,\n      answers: answers\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.createCheckBox = _this.createCheckBox.bind(_assertThisInitialized(_this));\n    return _this;\n  } // constructor\n\n\n  _createClass(CheckboxQuiz, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n      document.body.style.background = '#fff';\n      this.setState({\n        report: '',\n        shouldBlockNavigation: false\n      });\n      window.history.pushState(window.state, null, window.location.href);\n      window.onbeforeunload = null; // window.addEventListener(\"keypress\", e => this._handleRefresh(e));\n    }\n  }, {\n    key: \"_handleGoBack\",\n    value: function _handleGoBack(event) {\n      window.history.go(1);\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      // console.log(event)\n      event.preventDefault(); // Check if any of the boxes are checked -> combine the final report and send it to the parent Quiz Block component \n      // console.log(this.state.checkboxes)\n\n      var options = this.state.checkboxes;\n      var answers = this.state.answers;\n\n      var sumValues = function sumValues(obj) {\n        return Object.values(obj).reduce(function (a, b) {\n          return a + b;\n        });\n      };\n\n      var count = sumValues(this.state.checkboxes);\n      console.log('Number of checked boxes:', count); // sub select only answer options that have been checked \n\n      if (count > 0) {\n        // at least one box is checked\n        var report = {};\n        Object.keys(options).map(function (key, index) {\n          if (options[key] === true) {\n            report[key] = answers[key];\n          }\n        });\n        console.log(report);\n        this.props.onAnswerSelected(report, this.props.questionId, event);\n        this.setState({\n          report: ''\n        });\n      } else {\n        this.setState({\n          report: report\n        });\n      }\n    }\n  }, {\n    key: \"handleCheckboxChange\",\n    value: function handleCheckboxChange(changeEvent, e) {\n      console.log('ChangeEvent', changeEvent);\n      this.setState(function (prevState) {\n        return {\n          checkboxes: _objectSpread({}, prevState.checkboxes, _defineProperty({}, changeEvent, !prevState.checkboxes[changeEvent]))\n        };\n      }); // Check if any of the boxes are checked -> combine the final report and send it to the parent Quiz Block component \n      // console.log(this.state.checkboxes)\n    }\n  }, {\n    key: \"createCheckBox\",\n    value: function createCheckBox(key) {\n      var _this2 = this;\n\n      return React.createElement(Checkbox, {\n        label: key.content,\n        type: key.type,\n        isSelected: this.state.checkboxes[key],\n        onCheckboxChange: function onCheckboxChange(e) {\n          return _this2.handleCheckboxChange(key.type, e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        key: this.props.questionId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(QuestionCount, {\n        counter: this.props.questionCount,\n        total: this.props.questionTotal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(Question, {\n        content: this.props.question,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"answerOptions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, this.props.answerOptions.map(this.createCheckBox))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-md-12 pad-20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-save btn-primary pad-20\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return CheckboxQuiz;\n}(React.Component); // closing class \n\n\nCheckboxQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionCount: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\nexport default CheckboxQuiz;","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/src/components/CheckboxQuiz/CheckboxQuiz.js"],"names":["React","PropTypes","CSSTransitionGroup","Question","QuestionCount","Checkbox","CheckboxQuiz","props","options","answers","key","answerOptions","console","log","type","content","state","report","shouldBlockNavigation","checkboxes","handleSubmit","bind","createCheckBox","_isMounted","document","body","style","background","setState","window","history","pushState","location","href","onbeforeunload","event","go","preventDefault","sumValues","obj","Object","values","reduce","a","b","count","keys","map","index","onAnswerSelected","questionId","changeEvent","e","prevState","handleCheckboxChange","questionCount","questionTotal","question","Component","propTypes","answer","string","isRequired","array","number","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../QuizQuestion/Question';\nimport QuestionCount from '../QuizQuestion/QuestionCount';\nimport Checkbox from '../Checkbox/Checkbox'; \n\n\nclass CheckboxQuiz extends React.Component {\n\n  constructor(props){\n    super(props);\n  \n\n  var options = {}\n  var answers = {}\n\n// Object.keys(this.props.answerOptions).map(function(key, index) {\n//      // options[key] = false; // mybe to change to type\n//      options[key.type] = false; // mybe to change to type \n//    });\n \nfor (var key in this.props.answerOptions) {\n  console.log(key)\n  options[this.props.answerOptions[key].type] = false // this.props.answerOptions[key].type\n  answers[this.props.answerOptions[key].type] = this.props.answerOptions[key].content\n}\n\n\n this.state = {\n    report: '',\n    shouldBlockNavigation: false,\n    checkboxes: options,\n    answers: answers \n  }\n  \n  this.handleSubmit       = this.handleSubmit.bind(this);  \n  this.createCheckBox     = this.createCheckBox.bind(this); \n} // constructor\n\n\ncomponentDidMount() {\n  this._isMounted = true;\n  document.body.style.background= '#fff';   \n  this.setState({\n    report: '',\n    shouldBlockNavigation: false}\n    )\n  window.history.pushState(window.state, null, window.location.href)\n  window.onbeforeunload = null;\n  // window.addEventListener(\"keypress\", e => this._handleRefresh(e));\n\n}\n\n_handleGoBack(event){\n    window.history.go(1);\n  }\n\nhandleSubmit(event) {\n        \n        // console.log(event)\n        \n        event.preventDefault();\n\n        // Check if any of the boxes are checked -> combine the final report and send it to the parent Quiz Block component \n        // console.log(this.state.checkboxes)\n        const options = this.state.checkboxes\n        const answers = this.state.answers\n\n        const sumValues = obj => Object.values(obj).reduce((a, b) => a + b);\n        const count = sumValues(this.state.checkboxes);\n        console.log('Number of checked boxes:',count)\n        \n        // sub select only answer options that have been checked \n\n        if (count > 0){ // at least one box is checked\n\n        var report = {}\n          Object.keys(options).map(function(key, index) {\n          if (options[key]===true){\n            report[key] = answers[key]\n          }\n          });\n  \n        console.log(report)\n  \n          this.props.onAnswerSelected(report,this.props.questionId,event)\n          this.setState({\n          report: ''})\n        } \n\n        else {\n          this.setState({\n          report: report}\n          )\n        }\n      }\n\n\nhandleCheckboxChange(changeEvent,e) {\n  console.log('ChangeEvent',changeEvent)\n  \n  this.setState(prevState => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [changeEvent]: !prevState.checkboxes[changeEvent],\n      }\n    }));\n\n  // Check if any of the boxes are checked -> combine the final report and send it to the parent Quiz Block component \n  // console.log(this.state.checkboxes)\n\n}\n\n\ncreateCheckBox(key) {\n    return (\n      <Checkbox\n        label           ={key.content}\n        type            ={key.type}\n        isSelected      ={this.state.checkboxes[key]}\n        onCheckboxChange={(e)=>this.handleCheckboxChange(key.type,e)}\n      />\n    );\n  }\n\n\nrender() {\n        \n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={this.props.questionId}>\n        <QuestionCount counter={this.props.questionCount} total={this.props.questionTotal} />\n        <Question content={this.props.question}/>\n        \n        <div className=\"answerOptions\">\n          {this.props.answerOptions.map(this.createCheckBox)}\n        </div>\n      \n      </div>\n      <p></p>\n      <div className=\"col-md-12 pad-20\">\n        <div>\n          <button type=\"button\" className=\"btn btn-save btn-primary pad-20\" onClick={this.handleSubmit}>\n            Submit\n          </button>\n          </div>\n      </div>\n\n    </CSSTransitionGroup>\n  );\n}\n\n} // closing class \n\n\nCheckboxQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionCount: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n};\n\nexport default CheckboxQuiz;\n\n\n"]},"metadata":{},"sourceType":"module"}