{"ast":null,"code":"var _jsxFileName = \"/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/Block/Block.js\";\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport { API_URL } from '../../config';\nimport { handleResponse } from '../helpers'; // import { CSSTransitionGroup } from 'react-transition-group';\n\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'; // for newer version \n\nimport Score from '../Score/Score';\nimport './Block.css';\n\nclass Block extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.redirectToSurvey = () => {\n      // Post the bonus amount together with the prolific id and participant ids in the ParticipantsDataBonus table: \n      let body = {\n        'participant_id': this.state.participant_info.participant_id,\n        'prolific_id': this.state.participant_info.prolific_id,\n        'date_time': this.state.participant_info.date_time,\n        'date': this.state.participant_info.date,\n        'bonus': this.state.score\n      }; // console.log(body) \n\n      fetch(`${API_URL}/participants_data_bonus/create/` + this.state.participant_info.participant_id + '/' + this.state.participant_info.prolific_id, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      this.props.history.push({\n        pathname: `/Survey`,\n        state: {\n          participant_info: this.state.participant_info\n        } // to verify what is actually imported to a new page and what you need \n\n      });\n    };\n\n    const participant_info = this.props.location.state.participant_info;\n    console.log(participant_info);\n    const block_info = {\n      position: [],\n      reward_1: [],\n      reward_2: [],\n      block_feedback: '',\n      trial_numb: 0,\n      block_number: '',\n      block_type: '',\n      TotalTrial: ''\n    };\n    this.state = {\n      participant_info: participant_info,\n      block_info: block_info,\n      newblock_frame: this.props.location.state.newblock_frame,\n      pool_symbols: {},\n      score: -1,\n      load_bonus: false,\n      currentInstructionText: 1,\n      // this is for the transition between the instructions screens without changing the block number\n      readyToProceed: false\n    };\n    this.fetchBlock.bind(this);\n    this.fetchSymbols.bind(this);\n    this.redirectToScore.bind(this);\n    this.redirectToSurvey.bind(this);\n    this._isMounted = false;\n\n    this._handleGoBack.bind(this);\n\n    this.handleInstructionsLocal = this.handleInstructionsLocal.bind(this);\n  } // Transition between the instruction screens without changing the block    \n\n\n  handleInstructionsLocal(event) {\n    console.log(this.state);\n    var curText = this.state.currentInstructionText;\n    var whichButton = event.currentTarget.id;\n\n    if (whichButton === \"left\" && curText > 1) {\n      this.setState({\n        currentInstructionText: curText - 1\n      });\n    } else if (whichButton === \"right\" && curText < 3) {\n      this.setState({\n        currentInstructionText: curText + 1\n      });\n    }\n\n    if (whichButton === \"right\" && curText === 3) {\n      this.setState({\n        readyToProceed: true\n      });\n    }\n  }\n\n  redirectToTarget() {\n    // console.log(this.state.pool_symbols)\n    if (this.state.participant_info.block_number <= this.state.participant_info.TotalBlock) {\n      if (this.state.newblock_frame) {\n        this.setState({\n          newblock_frame: false\n        });\n        this.props.history.push({\n          pathname: `/Board`,\n          state: {\n            participant_info: this.state.participant_info,\n            block_info: this.state.block_info,\n            pool_symbols: this.state.pool_symbols\n          }\n        });\n      } else {\n        if (this._isMounted) {\n          // console.log(this.state.participant_info.block_number)\n          const newblocknumber = this.state.participant_info.block_number + 1; // console.log(newblocknumber)\n\n          if (newblocknumber === this.state.participant_info.TotalBlock + 1) {\n            console.log('Fetching the score');\n            this.fetchScore();\n          } else {\n            this.fetchBlock(this.state.participant_info.game_id, newblocknumber + 1); //this.state.participant_info.block_number\n\n            this.fetchSymbols(this.state.participant_info.game_id, newblocknumber + 1);\n            this.setState({\n              newblock_frame: true,\n              participant_info: { ...this.state.participant_info,\n                block_number: newblocknumber\n              }\n            }); // what gets updated \n          }\n        }\n      }\n    }\n  } // When the task is over \n\n\n  fetchScore() {\n    if (this._isMounted) {\n      fetch(`${API_URL}/participants_data/score/` + this.state.participant_info.participant_id + '/' + this.state.participant_info.game_id + '/' + this.state.participant_info.prolific_id).then(handleResponse).then(data => {\n        const bonus = data['bonus']; // console.log(bonus)\n\n        this.setState({\n          score: bonus,\n          loading: false,\n          load_bonus: true,\n          newblock_frame: true,\n          participant_info: { ...this.state.participant_info,\n            block_number: this.state.participant_info.TotalBlock + 1\n          }\n        });\n      }).catch(error => {\n        this.setState({\n          error: error.errorMessage,\n          loading: false,\n          load_bonus: false\n        });\n      });\n    }\n  }\n\n  redirectToScore() {\n    if (this.state.load_bonus === false) {\n      this.fetchScore();\n    } else if (this.state.load_bonus === true) {\n      return /*#__PURE__*/React.createElement(Score, {\n        score: this.state.score,\n        onClicked: this.redirectToSurvey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    document.body.style.background = '#fff';\n    this._isMounted && this.fetchBlock(this.state.participant_info.game_id, this.state.participant_info.block_number + 1);\n    this._isMounted && this.fetchSymbols(this.state.participant_info.game_id, this.state.participant_info.block_number + 1);\n    window.history.pushState(window.state, null, window.location.href);\n    window.addEventListener('popstate', e => this._handleGoBack(e));\n    window.onbeforeunload = this._handleRefresh;\n  }\n\n  _handleRefresh(evt) {\n    return false; // error message when refresh occurs\n  }\n\n  _handleGoBack(event) {\n    window.history.go(1);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  fetchSymbols(game_id_, block_number_) {\n    fetch(`${API_URL}/games/` + game_id_ + '/' + block_number_).then(handleResponse).then(data => {\n      const required_pool_of_symbols = Object.keys(data['symbols']).map((key, index) => require('../../images/' + data['symbols'][key])); // console.log(data['symbols'])  \n\n      this.setState({\n        pool_symbols: required_pool_of_symbols,\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        error: error.errorMessage,\n        loading: false\n      });\n    });\n  } // This is to get the data for a specific block from the Back \n\n\n  async fetchBlock(game_id_, block_number_) {\n    console.log(block_number_);\n    console.log(game_id_);\n    this.setState({\n      loading: true\n    });\n    const fetchResult = fetch(`${API_URL}/game_blocks/` + game_id_ + '/' + block_number_).then(handleResponse).then(data => {\n      const block_info = {\n        block_number: data.block_number,\n        block_feedback: data.block_feedback,\n        block_type: data.block_type,\n        reward_1: Object.keys(data['reward_1']).map((key, index) => data['reward_1'][key]),\n        reward_2: Object.keys(data['reward_2']).map((key, index) => data['reward_2'][key]),\n        th_reward_1: Object.keys(data['th_reward_1']).map((key, index) => data['th_reward_1'][key]),\n        th_reward_2: Object.keys(data['th_reward_2']).map((key, index) => data['th_reward_2'][key]),\n        position: Object.keys(data['position']).map((key, index) => data['position'][key]),\n        trial_numb: 0,\n        TotalTrial: 2 // Object.keys(data['reward_1']).length  // 1 for THIS IS FOR THE TEST ONLY \n\n      };\n      this.setState({\n        block_info: block_info\n      }); // console.log(this.state.block_info)\n    }).catch(error => {\n      this.setState({\n        error: error.errorMessage,\n        loading: false\n      });\n    });\n    const response = await fetchResult;\n    return response;\n  }\n\n  render() {\n    let text;\n\n    if (this.state.participant_info.block_number === 0 && this.state.newblock_frame && this.state.block_info.block_feedback === \"1\") {\n      text = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"textbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 14\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 40\n        }\n      }, \"This is a \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 53\n        }\n      }, \"partial\"), \" feedback training block: you will \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 125\n        }\n      }, \"only\"), \" see points of the \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 180\n        }\n      }, \"chosen\"), \" slot machine.\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"translate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_0_grate_None_color_3.png'),\n        alt: \"introsymbol\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"introsymbol\",\n        src: require('../../images/symbol_shape_2_grate_None_color_0.png'),\n        alt: \"introsymbol\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }\n      }));\n      return /*#__PURE__*/React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"instructionsButtonContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 9\n        }\n      }, text), /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"buttonInstructionsBlock\",\n        onClick: () => this.redirectToTarget(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }\n      }, \"\\u2192\"))))));\n    } // The second training block is always complete one, we introduce confidence ratings here \n    else if (this.state.participant_info.block_number === 1 && this.state.newblock_frame && this.state.block_info.block_feedback === \"2\") {\n        if (this.state.currentInstructionText === 1) {\n          text = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"textbox\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 16\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }\n          }, \"Did you notice that the most rewarding colored shape was not the same throughout the session?\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }\n          }, \"At the beginning it was \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold red\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 44\n            }\n          }, \" the red circle \"), \" but in the middle of the session it changed,\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 17\n            }\n          }, \"and \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold blue\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 24\n            }\n          }, \"the blue star \"), \" became more rewarding?!\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }\n          }, \"It is important that you track these changes !\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 17\n            }\n          }, \"It is also important to track outcomes \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold italic\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 59\n            }\n          }, \"in time\"), \" and avoid switching too much\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }\n          }, \"because even a good shape can occasionally give few points !\"));\n        } else if (this.state.currentInstructionText === 2) {\n          text = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"textbox\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 20\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 13\n            }\n          }, \"Additionally, we will also ask you how confident you are in your decision on a scale from 50% to 100%\"), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"translate\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 13\n            }\n          }), /*#__PURE__*/React.createElement(\"img\", {\n            className: \"introconf\",\n            src: require('../../images/conf_intro.png'),\n            alt: \"introconf\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 13\n            }\n          }), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 13\n            }\n          }, \"50% confidence indicates that you are \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 54\n            }\n          }, \" very uncertain\"), \" that the chosen option is \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 128\n            }\n          }, \" currently the most rewarding\"), \".\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 13\n            }\n          }, \"100% confidence indicates that you are \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 55\n            }\n          }, \" very certain\"), \"  that the chosen option is \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 128\n            }\n          }, \" currently the most rewarding\"), \".\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 13\n            }\n          }, \"Do your best to rate your confidence accurately!\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 13\n            }\n          }, \"Be sure to make use of the \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 43\n            }\n          }, \"full length\"), \" of the scale throughout the game.\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 13\n            }\n          }, \"Note, that if you fail to use the confidence scale appropriately, \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 82\n            }\n          }, \"you won't get the bonus at the end of the game \"), \" even if you won one! \"));\n        } else if (this.state.currentInstructionText === 3) {\n          text = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"textbox\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }\n          }, \"Let's do another training session with \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 57\n            }\n          }, \"complete feedback\"), \" now: you will see \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 123\n            }\n          }, \"both\"), \" the feedback of the \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 178\n            }\n          }, \"chosen\"), \" and \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 219\n            }\n          }, \"unchosen\"), \" slot machines.\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }\n          }, \"You will also rate your confidence.\"), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"translate\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }\n          }), /*#__PURE__*/React.createElement(\"img\", {\n            className: \"introsymbol\",\n            src: require('../../images/symbol_shape_1_grate_None_color_2.png'),\n            alt: \"introsymbol\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }\n          }), /*#__PURE__*/React.createElement(\"img\", {\n            className: \"introsymbol\",\n            src: require('../../images/symbol_shape_3_grate_None_color_1.png'),\n            alt: \"introsymbol\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }\n          }));\n        }\n\n        return /*#__PURE__*/React.createElement(CSSTransitionGroup, {\n          className: \"container\",\n          component: \"div\",\n          transitionName: \"fade\",\n          transitionEnterTimeout: 800,\n          transitionLeaveTimeout: 500,\n          transitionAppear: true,\n          transitionAppearTimeout: 500,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"center\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 9\n          }\n        }, text), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"instructionsButtonContainer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 9\n          }\n        }, this.state.currentInstructionText === 3 ? /*#__PURE__*/React.createElement(Button, {\n          id: \"start\",\n          className: \"buttonInstructionsBlock\",\n          onClick: () => this.redirectToTarget(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }\n        }, \"START\") : /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          id: \"left\",\n          className: \"buttonInstructions\",\n          onClick: this.handleInstructionsLocal,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"bold\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }\n        }, \"\\u2190\")), /*#__PURE__*/React.createElement(Button, {\n          id: \"right\",\n          className: \"buttonInstructions\",\n          onClick: this.handleInstructionsLocal,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"bold\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }\n        }, \"\\u2192\")))))));\n      } // Starting the real task   \n      else if (this.state.participant_info.block_number === 1 && this.state.newblock_frame === false) {\n          text = /*#__PURE__*/React.createElement(\"div\", {\n            className: \"textbox\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 14\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 39\n            }\n          }, \" You finished the training!\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 19\n            }\n          }), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 19\n            }\n          }, \" Let's start the task now! \"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 19\n            }\n          }, \" At the beginning of each block you will see if you are playing \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 86\n            }\n          }, \"partial\"), \" or \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"bold\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 127\n            }\n          }, \"complete\"), \" feedback block! \"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 19\n            }\n          }, \" Finding the most rewarding slot machine will be harder than during the training, so pay attention!\"), /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 19\n            }\n          }, \" Don't forget to report you confidence ratings accurately!\"));\n          return /*#__PURE__*/React.createElement(CSSTransitionGroup, {\n            className: \"container\",\n            component: \"div\",\n            transitionName: \"fade\",\n            transitionEnterTimeout: 800,\n            transitionLeaveTimeout: 500,\n            transitionAppear: true,\n            transitionAppearTimeout: 500,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 7\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 9\n            }\n          }, /*#__PURE__*/React.createElement(\"center\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 9\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 9\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"restarttraining\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 11\n            }\n          }, text, \"  \", /*#__PURE__*/React.createElement(\"div\", {\n            className: \"translate\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 21\n            }\n          })), /*#__PURE__*/React.createElement(\"center\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            className: \"buttonInstructionsBlock\",\n            onClick: () => this.redirectToTarget(),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 13\n            }\n          }, \"\\u2192\"))))));\n        } else if (this.state.participant_info.block_number === this.state.participant_info.TotalBlock + 1 && this.state.load_bonus === true) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 11\n            }\n          }, this.redirectToScore());\n        } else {\n          const feedback_type_text = this.state.block_info.block_feedback === \"1\" ? 'PARTIAL' : 'COMPLETE';\n          const end_of_block_text = this.state.block_info.block_type === \"training\" ? 'End of training block' : 'End of block ' + (this.state.participant_info.block_number - 1);\n\n          if (this.state.newblock_frame) {\n            text = /*#__PURE__*/React.createElement(\"div\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 18\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 23\n              }\n            }, \"The next block is \", /*#__PURE__*/React.createElement(\"span\", {\n              className: \"bold\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 44\n              }\n            }, feedback_type_text), \" feedback block!\"));\n          } else {\n            text = /*#__PURE__*/React.createElement(\"div\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 18\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 23\n              }\n            }, end_of_block_text)); //'End of block ' + (this.state.participant_info.block_number+1)\n          }\n\n          return /*#__PURE__*/React.createElement(CSSTransitionGroup, {\n            className: \"container\",\n            component: \"div\",\n            transitionName: \"fade\",\n            transitionEnterTimeout: 800,\n            transitionLeaveTimeout: 800,\n            transitionAppear: true,\n            transitionAppearTimeout: 800,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 7\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 7\n            }\n          }, /*#__PURE__*/React.createElement(\"center\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 7\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: \"restarttraining\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 7\n            }\n          }, text), /*#__PURE__*/React.createElement(\"center\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 9\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            className: \"buttonInstructionStart\",\n            onClick: () => this.redirectToTarget(),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 9\n            }\n          }, \"\\u2192\")))));\n        }\n  }\n\n}\n\nexport default withRouter(Block);","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/Block/Block.js"],"names":["React","Button","withRouter","API_URL","handleResponse","CSSTransitionGroup","Score","Block","Component","constructor","props","redirectToSurvey","body","state","participant_info","participant_id","prolific_id","date_time","date","score","fetch","method","headers","JSON","stringify","history","push","pathname","location","console","log","block_info","position","reward_1","reward_2","block_feedback","trial_numb","block_number","block_type","TotalTrial","newblock_frame","pool_symbols","load_bonus","currentInstructionText","readyToProceed","fetchBlock","bind","fetchSymbols","redirectToScore","_isMounted","_handleGoBack","handleInstructionsLocal","event","curText","whichButton","currentTarget","id","setState","redirectToTarget","TotalBlock","newblocknumber","fetchScore","game_id","then","data","bonus","loading","catch","error","errorMessage","componentDidMount","document","style","background","window","pushState","href","addEventListener","e","onbeforeunload","_handleRefresh","evt","go","componentWillUnmount","game_id_","block_number_","required_pool_of_symbols","Object","keys","map","key","index","require","fetchResult","th_reward_1","th_reward_2","response","render","text","feedback_type_text","end_of_block_text"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport {withRouter} from 'react-router-dom';\nimport { API_URL } from '../../config';\nimport { handleResponse } from '../helpers';\n\n// import { CSSTransitionGroup } from 'react-transition-group';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'; // for newer version \n\n\nimport Score from '../Score/Score';\n\nimport './Block.css'\n\n\nclass Block extends React.Component {\n  constructor(props){\n    super(props);\n    const participant_info = this.props.location.state.participant_info\n\n    console.log(participant_info)\n\n    \n    const block_info = {\n\n      position      : [],\n      reward_1      : [],\n      reward_2      : [],\n      block_feedback: '',  \n      trial_numb    : 0,\n      block_number  : '', \n      block_type    : '',\n      TotalTrial    : ''\n    }\n\n    this.state = {\n      participant_info      : participant_info,\n      block_info            : block_info,\n      newblock_frame        : this.props.location.state.newblock_frame,\n      pool_symbols          : {},\n      score                 : -1,\n      load_bonus            : false, \n      currentInstructionText: 1, // this is for the transition between the instructions screens without changing the block number\n      readyToProceed        : false      \n    }\n\n    this.fetchBlock.bind(this);\n    this.fetchSymbols.bind(this);\n    this.redirectToScore.bind(this); \n    this.redirectToSurvey.bind(this); \n    this._isMounted = false;\n    this._handleGoBack.bind(this);\n    this.handleInstructionsLocal = this.handleInstructionsLocal.bind(this) \n\n  }\n\n  // Transition between the instruction screens without changing the block    \n  handleInstructionsLocal(event){\n    console.log(this.state) \n    var curText     = this.state.currentInstructionText;\n    var whichButton = event.currentTarget.id;\n    \n    if(whichButton===\"left\" && curText > 1){\n      this.setState({currentInstructionText: curText-1});\n      }\n    else if(whichButton===\"right\" && curText < 3){\n      \n    this.setState({currentInstructionText: curText+1});\n    }\n\n    if(whichButton===\"right\" && curText === 3){\n      this.setState({readyToProceed: true});\n    }\n  }\n\n\n  redirectToTarget () {\n      // console.log(this.state.pool_symbols)\n      if((this.state.participant_info.block_number <= (this.state.participant_info.TotalBlock)))\n          {           \n          if (this.state.newblock_frame){\n          this.setState({newblock_frame : false})\n          this.props.history.push({\n           pathname: `/Board`,\n           state: {participant_info: this.state.participant_info,\n                   block_info      : this.state.block_info,\n                   pool_symbols    : this.state.pool_symbols\n                 }\n          })}\n          else\n          {\n            if (this._isMounted)\n            {\n              \n              // console.log(this.state.participant_info.block_number)\n              const newblocknumber = this.state.participant_info.block_number + 1\n              // console.log(newblocknumber)\n\n              if (newblocknumber === this.state.participant_info.TotalBlock+1){ \n                console.log('Fetching the score')\n                this.fetchScore()\n                }\n\n              else {\n                this.fetchBlock(this.state.participant_info.game_id,newblocknumber+1) //this.state.participant_info.block_number\n              \n                this.fetchSymbols(this.state.participant_info.game_id,newblocknumber+1); \n              \n                this.setState({newblock_frame : true, participant_info : {...this.state.participant_info, block_number:newblocknumber},}) // what gets updated \n              }\n            }\n          }\n        }\n      }\n    \n  // When the task is over \n  fetchScore() {\n  if (this._isMounted) {\n\n    fetch(`${API_URL}/participants_data/score/`+ this.state.participant_info.participant_id +'/'+ this.state.participant_info.game_id +'/'+this.state.participant_info.prolific_id)\n            .then(handleResponse)\n            .then((data) => {\n              const bonus = data['bonus']\n              // console.log(bonus)\n\n              this.setState({\n                  score : bonus,\n                  loading : false,\n                  load_bonus: true,\n                  newblock_frame : true,\n                  participant_info : {...this.state.participant_info, block_number:this.state.participant_info.TotalBlock+1}\n                });\n            })\n            .catch((error) => {\n                this.setState({ error : error.errorMessage, loading: false, load_bonus: false });\n                 });\n}\n}\n\nredirectToScore() {\nif (this.state.load_bonus === false) {\n  this.fetchScore() \n}\n  \nelse if  (this.state.load_bonus === true){\n   return (\n        <Score\n          score      = {this.state.score}  \n          onClicked  = {this.redirectToSurvey}\n        />\n      );}\n }\n\nredirectToSurvey = () => {\n\n  // Post the bonus amount together with the prolific id and participant ids in the ParticipantsDataBonus table: \n  let body = { \n              'participant_id'  : this.state.participant_info.participant_id,\n              'prolific_id'     : this.state.participant_info.prolific_id,\n              'date_time'       : this.state.participant_info.date_time,\n              'date'            : this.state.participant_info.date,\n              'bonus'           : this.state.score}\n              \n    // console.log(body) \n    fetch(`${API_URL}/participants_data_bonus/create/`+this.state.participant_info.participant_id +'/'+this.state.participant_info.prolific_id, {\n       method: 'POST',\n       headers: {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n       },\n       body: JSON.stringify(body)\n     })\n\n    this.props.history.push({\n      pathname: `/Survey`,\n      state: {participant_info: this.state.participant_info} // to verify what is actually imported to a new page and what you need \n    })\n  } \n  componentDidMount() {  \n  this._isMounted = true;\n  document.body.style.background= '#fff';   \n  this._isMounted && this.fetchBlock(this.state.participant_info.game_id,this.state.participant_info.block_number+1);\n  this._isMounted && this.fetchSymbols(this.state.participant_info.game_id,this.state.participant_info.block_number+1);\n  window.history.pushState(window.state, null, window.location.href);\n  window.addEventListener('popstate', e => this._handleGoBack(e));\n  window.onbeforeunload = this._handleRefresh\n  }\n\n  _handleRefresh(evt){\n    return false // error message when refresh occurs\n  }\n\n  _handleGoBack(event){\n    window.history.go(1);\n  }\n\n  componentWillUnmount()\n  {\n   this._isMounted = false;\n  }  \n\n\n  fetchSymbols(game_id_,block_number_) {\n    fetch(`${API_URL}/games/`+game_id_+'/'+block_number_) \n      .then(handleResponse)\n      .then((data) => {\n\n        const required_pool_of_symbols = Object.keys(data['symbols']).map((key, index) => (require('../../images/' + data['symbols'][key])))\n\n        // console.log(data['symbols'])  \n\n          this.setState({\n            pool_symbols : required_pool_of_symbols,\n            loading      : false \n\n          });\n        })\n\n      .catch((error) => {\n        this.setState({ error : error.errorMessage, loading: false });\n         });\n       }\n\n// This is to get the data for a specific block from the Back \n  async fetchBlock(game_id_,block_number_) {\n    \n    console.log(block_number_)\n    console.log(game_id_)\n    \n\n\n    this.setState({ loading: true });\n    const fetchResult = fetch(`${API_URL}/game_blocks/`+game_id_+'/'+block_number_)\n      .then(handleResponse)\n      .then((data) => {\n\n        const block_info = {\n          block_number   : data.block_number,\n          block_feedback : data.block_feedback, \n          block_type     : data.block_type,\n          reward_1       : Object.keys(data['reward_1']).map((key, index) => (data['reward_1'][key])),\n          reward_2       : Object.keys(data['reward_2']).map((key, index) => (data['reward_2'][key])),\n          th_reward_1    : Object.keys(data['th_reward_1']).map((key, index) => (data['th_reward_1'][key])),\n          th_reward_2    : Object.keys(data['th_reward_2']).map((key, index) => (data['th_reward_2'][key])),\n          position       : Object.keys(data['position']).map((key, index) => (data['position'][key])),\n          trial_numb     : 0,\n          TotalTrial     : 2 // Object.keys(data['reward_1']).length  // 1 for THIS IS FOR THE TEST ONLY \n        }\n          \n        this.setState({\n          block_info: block_info,\n        });\n        // console.log(this.state.block_info)\n      })\n        .catch((error) => {\n          this.setState({ error : error.errorMessage, loading: false });\n      });\n    const response = await fetchResult;\n    return response\n  }\n\n\nrender()\n  { \n    let text\n    if ((this.state.participant_info.block_number === 0) && (this.state.newblock_frame) && (this.state.block_info.block_feedback===\"1\"))\n    { \n      text = <div className='textbox'> <p>This is a <span className=\"bold\">partial</span> feedback training block: you will <span className = \"bold\">only</span> see points of the <span className = \"bold\">chosen</span> slot machine.</p> \n              <div className=\"translate\"/>\n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_0_grate_None_color_3.png')} alt='introsymbol' /> \n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_2_grate_None_color_0.png')} alt='introsymbol' /> \n            </div>\n\n    return (\n      <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}>\n\n      <div>\n      <center> \n      <div className=\"instructionsButtonContainer\">\n        <div>\n          {text}           \n        </div> \n        <center>\n          <Button className=\"buttonInstructionsBlock\" onClick={()=>this.redirectToTarget()}>\n            &#8594;\n          </Button>\n        </center>\n      </div>\n      </center> \n      </div>\n      </CSSTransitionGroup>);\n    } \n\n    // The second training block is always complete one, we introduce confidence ratings here \n\n    else if ((this.state.participant_info.block_number===1) && (this.state.newblock_frame) && (this.state.block_info.block_feedback===\"2\")) \n    { \n\n      if (this.state.currentInstructionText===1) {\n        text = <div className='textbox'> \n                <p>Did you notice that the most rewarding colored shape was not the same throughout the session?</p>\n                <p>At the beginning it was <span className=\"bold red\"> the red circle </span> but in the middle of the session it changed,</p> \n                <p>and <span className=\"bold blue\">the blue star </span> became more rewarding?!</p>\n                <p>It is important that you track these changes !</p>\n                <p>It is also important to track outcomes <span className='bold italic'>in time</span> and avoid switching too much</p>\n                <p>because even a good shape can occasionally give few points !</p>\n              </div>\n              }\n\n        else if (this.state.currentInstructionText===2) {\n            text = <div className='textbox'>\n            <p>Additionally, we will also ask you how confident you are in your decision on a scale from 50% to 100%</p>\n            <div className=\"translate\"/>\n            \n            <img className=\"introconf\"  src={require('../../images/conf_intro.png')} alt='introconf'/> \n            <p>50% confidence indicates that you are <span className = 'bold'> very uncertain</span> that the chosen option is <span className='bold'> currently the most rewarding</span>.</p>\n            <p>100% confidence indicates that you are <span className = 'bold'> very certain</span>  that the chosen option is <span className='bold'> currently the most rewarding</span>.</p> \n            \n            <p>Do your best to rate your confidence accurately!</p> \n            <p>Be sure to make use of the <span className='bold'>full length</span> of the scale throughout the game.</p>\n  \n            <p>Note, that if you fail to use the confidence scale appropriately, <span className = 'bold'>you won't get the bonus at the end of the game </span> even if you won one! </p>\n\n            </div>\n          }\n        else if (this.state.currentInstructionText===3) {\n             text = <div className='textbox'> \n              <p>Let's do another training session with <span className=\"bold\">complete feedback</span> now: you will see <span className=\"bold\">both</span> the feedback of the <span className=\"bold\">chosen</span> and <span className=\"bold\">unchosen</span> slot machines.</p> \n              <p>You will also rate your confidence.</p>\n              \n                <div className=\"translate\"/>\n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_1_grate_None_color_2.png')} alt='introsymbol'/> \n                <img className=\"introsymbol\"  src={require('../../images/symbol_shape_3_grate_None_color_1.png')} alt='introsymbol'/>\n              </div>\n        }\n   \n        return (\n          <CSSTransitionGroup\n            className=\"container\"\n            component=\"div\"\n            transitionName=\"fade\"\n            transitionEnterTimeout={800}\n            transitionLeaveTimeout={500}\n            transitionAppear\n            transitionAppearTimeout={500}>\n        <div>\n        <center>\n\n        <div>\n            {text}           \n        </div> \n          \n\n        <div className=\"instructionsButtonContainer\">\n\n          \n          {this.state.currentInstructionText===3 ?\n            <Button id=\"start\" className=\"buttonInstructionsBlock\" onClick={()=>this.redirectToTarget()}>\n              START\n            </Button>\n            :\n            <div>\n            <Button id=\"left\" className=\"buttonInstructions\" onClick={this.handleInstructionsLocal}> \n              <span className=\"bold\">&#8592;</span>\n            </Button>\n            <Button id=\"right\" className=\"buttonInstructions\" onClick={this.handleInstructionsLocal}> \n              <span className=\"bold\">&#8594;</span>\n            </Button>\n            </div>\n          }\n          \n          </div>\n          </center>\n          </div>\n      </CSSTransitionGroup>);\n      }\n\n    // Starting the real task   \n    else if ((this.state.participant_info.block_number===1) && (this.state.newblock_frame===false))\n    {\n      text = <div className='textbox'><p> You finished the training!</p>\n                  <p></p>\n                  <p> Let's start the task now! </p>\n                  <p> At the beginning of each block you will see if you are playing <span className=\"bold\">partial</span> or <span className=\"bold\">complete</span> feedback block! </p>\n                  <p> Finding the most rewarding slot machine will be harder than during the training, so pay attention!</p>\n                  <p> Don't forget to report you confidence ratings accurately!</p>\n                  </div>\n      return (\n      <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}>\n        <div>\n        <center> \n        <div>\n          <div className=\"restarttraining\">\n            {text}  <div className=\"translate\"/>\n          </div>\n          <center>\n            <Button className=\"buttonInstructionsBlock\" onClick={()=>this.redirectToTarget()}>\n            &#8594;\n            </Button>\n          </center>\n        </div>\n        </center>\n        </div>\n        </CSSTransitionGroup>);\n    }\n    else if (\n      (this.state.participant_info.block_number===this.state.participant_info.TotalBlock+1) && (this.state.load_bonus===true)\n     \n      )\n    {\n      return(\n\n          <div>{this.redirectToScore()}</div>       \n        )\n    }\n\n    else\n    {\n      const feedback_type_text = (this.state.block_info.block_feedback===\"1\") ? 'PARTIAL' : 'COMPLETE';\n      const end_of_block_text  = (this.state.block_info.block_type===\"training\") ? 'End of training block': 'End of block ' + (this.state.participant_info.block_number-1)\n      \n      if (this.state.newblock_frame) \n        {\n          text = <div><p>The next block is <span className=\"bold\">{feedback_type_text}</span> feedback block!</p></div>\n        }\n      else\n        { \n          text = <div><p>{end_of_block_text}</p></div> //'End of block ' + (this.state.participant_info.block_number+1)\n        }\n        return (\n      <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={800}\n      transitionAppear\n      transitionAppearTimeout={800}>\n\n      <div>\n      <center>\n      <div className=\"restarttraining\">\n        {text}           \n      </div>\n        <center>\n        <Button className=\"buttonInstructionStart\" onClick={()=>this.redirectToTarget()}>\n          &#8594;\n        </Button>\n        </center>\n    </center>\n    </div>\n    </CSSTransitionGroup>);\n    }    \n  }\n\n}\n\nexport default withRouter(Block);"]},"metadata":{},"sourceType":"module"}