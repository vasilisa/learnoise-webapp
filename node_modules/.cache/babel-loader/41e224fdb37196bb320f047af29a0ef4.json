{"ast":null,"code":"var _jsxFileName = \"/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/QuizBlock/QuizBlock.js\";\nimport React from 'react';\nimport { API_URL } from '../../config';\nimport Quiz from '../Quiz/Quiz';\nimport Report from '../Report/Report';\nimport ReportNA from '../ReportNA/ReportNA';\nimport FreeReport from '../FreeReport/FreeReport';\nimport ButtonQuiz from '../ButtonQuiz/ButtonQuiz';\nimport CheckboxQuiz from '../CheckboxQuiz/CheckboxQuiz';\n\nclass QuizBlock extends React.Component {\n  constructor(props) {\n    super(props); // Get the right questions JSON part\n\n    var quizQuestionsBlock = this.props.location.state.questions.filter(d => d.surveytag === this.props.location.state.block_info.surveytag); // console.log(quizQuestionsBlock)\n\n    var date_time_now = new Date().toLocaleString(); // console.log('QuizBlock Props PINFO:',this.props.location.state.participant_info)\n\n    this.state = {\n      counter: 0,\n      questionCount: 1,\n      // count across all questions in the questionnaire \n      question: '',\n      answerOptions: [],\n      answer: '',\n      qtype: '',\n      // the type of the question to be asked\n      questionId: '',\n      // Question id stored in the JS object, does not have to be consecuitive. \n      answersCount: {},\n      result: '',\n      constraint: [],\n      quizQuestionsBlock: quizQuestionsBlock,\n      participant_info: this.props.location.state.participant_info,\n      image: '',\n      // image question\n      image_a: '',\n      // image - answer if available\n      date_time_start: date_time_now,\n      // This is to be recorded and POSTED to the DB\n      answered_questionsId: [],\n      answered_questionsContent: []\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n    this.redirectToSurvey = this.redirectToSurvey.bind(this);\n  }\n\n  componentDidMount() {\n    const firstQuestion = this.state.quizQuestionsBlock[0];\n    const image_item = this.state.quizQuestionsBlock[0].image === undefined ? null : require('../../images/' + this.state.quizQuestionsBlock[0].image);\n    const image_a = this.state.quizQuestionsBlock[0].image_a === undefined ? null : require('../../images/' + this.state.quizQuestionsBlock[0].image_a);\n    var shuffledAnswerOptions = this.state.quizQuestionsBlock.map(question => this.NoShuffleArray(question.answers));\n    document.body.style.background = '#fff';\n    this.setState({\n      questionId: firstQuestion.questionId,\n      qtype: firstQuestion.qtype,\n      question: firstQuestion.question,\n      answerOptions: shuffledAnswerOptions[0],\n      constraint: firstQuestion.constraint,\n      image: image_item,\n      image_a: image_a\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  NoShuffleArray(array) {\n    var currentIndex = array.length;\n    return array;\n  } // onAnswerSelected points to this function in AnswerOption.js \n\n\n  handleAnswerSelected(answerContent, questionId, event) {\n    this.setUserAnswer(event.currentTarget.value, answerContent, questionId);\n\n    if (this.state.questionCount < this.state.quizQuestionsBlock.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.redirectToSurvey(), 300);\n    }\n  }\n\n  setUserAnswer(answer, answerContent, questionId) {\n    // This is to be recorded and POSTED to the DB\n    let answered_questionsId = this.state.answered_questionsId;\n    answered_questionsId.push(questionId);\n    let answered_questionsContent = this.state.answered_questionsContent;\n    answered_questionsContent.push(answerContent);\n    this.setState((state, props) => ({\n      answer: answer,\n      answered_questionsId: answered_questionsId,\n      answered_questionsContent: answered_questionsContent\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionCount = this.state.questionCount + 1;\n    const nextQuestion = this.state.quizQuestionsBlock[counter];\n    const image_item = this.state.quizQuestionsBlock[counter].image === undefined ? null : require('../../images/' + this.state.quizQuestionsBlock[counter].image);\n    const image_a = this.state.quizQuestionsBlock[counter].image_a === undefined ? null : require('../../images/' + this.state.quizQuestionsBlock[counter].image_a);\n    this.setState({\n      counter: counter,\n      questionCount: questionCount,\n      questionId: nextQuestion.questionId,\n      question: nextQuestion.question,\n      answerOptions: nextQuestion.answers,\n      answer: '',\n      qtype: nextQuestion.qtype,\n      constraint: nextQuestion.constraint,\n      image: image_item,\n      image_a: image_a\n    });\n  }\n\n  redirectToSurvey() {\n    let block_id = this.state.participant_info.block_number_survey + 1; // console.log('Block_number QuizBlock:', this.state.participant_info.block_number)\n\n    var date_time_now = new Date().toLocaleString();\n\n    if (this.state.participant_info.block_number_survey < this.state.participant_info.TotalBlock) {\n      var completed = 'no';\n    } else if (this.state.participant_info.block_number_survey === this.state.participant_info.TotalBlock) {\n      var completed = 'yes';\n    }\n\n    let body = {\n      'participant_id': this.state.participant_info.participant_id,\n      'prolific_id': this.state.participant_info.prolific_id,\n      'study_id': this.state.participant_info.study_id,\n      'block_number': this.state.participant_info.block_number_survey + 1,\n      'block_name': this.props.location.state.block_info.surveytag,\n      'question_ids': this.state.answered_questionsId,\n      'answers': this.state.answered_questionsContent,\n      'survey_completed': completed,\n      'date_time_survey_start': this.state.date_time_start,\n      'date_time_survey_end': date_time_now,\n      'date_time': this.props.location.state.participant_info.date_time,\n      'date': this.props.location.state.participant_info.date\n    }; // console.log(body)\n\n    fetch(`${API_URL}/participants_question_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }); // console.log('PINFO quizBlock', this.state.participant_info)\n\n    this.props.history.push({\n      pathname: `/Survey`,\n      state: {\n        participant_info: this.state.participant_info,\n        newblock_frame: false,\n        finished: true\n      }\n    });\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n  }\n\n  renderQuiz() {\n    if (this.state.qtype === \"quiz\") {\n      return /*#__PURE__*/React.createElement(Quiz, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        image: this.state.image,\n        image_a: this.state.image_a // Add line for the part of the study: NEW \n        ,\n        survey_part: this.state.participant_info.block_number_survey + 1,\n        surveyTotal: this.state.participant_info.TotalBlock + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }\n      });\n    } else if (this.state.qtype === \"report\") {\n      return /*#__PURE__*/React.createElement(Report, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        constraint: this.state.constraint,\n        survey_part: this.state.participant_info.block_number_survey + 1,\n        surveyTotal: this.state.participant_info.TotalBlock + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }\n      });\n    } else if (this.state.qtype === \"report-na\") {\n      return /*#__PURE__*/React.createElement(ReportNA, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        constraint: this.state.constraint,\n        survey_part: this.state.participant_info.block_number_survey + 1,\n        surveyTotal: this.state.participant_info.TotalBlock + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 9\n        }\n      });\n    } else if (this.state.qtype === \"free-report\") {\n      return /*#__PURE__*/React.createElement(FreeReport, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        constraint: this.state.constraint,\n        survey_part: this.state.participant_info.block_number_survey + 1,\n        surveyTotal: this.state.participant_info.TotalBlock + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 9\n        }\n      });\n    } else if (this.state.qtype === \"button\") {\n      return /*#__PURE__*/React.createElement(ButtonQuiz, {\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        survey_part: this.state.participant_info.block_number_survey + 1,\n        surveyTotal: this.state.participant_info.TotalBlock + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 9\n        }\n      });\n    } else if (this.state.qtype === \"checkbox\") {\n      return /*#__PURE__*/React.createElement(CheckboxQuiz, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        questionCount: this.state.questionCount,\n        question: this.state.question,\n        questionTotal: this.state.quizQuestionsBlock.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        survey_part: this.state.participant_info.block_number_survey + 1,\n        surveyTotal: this.state.participant_info.TotalBlock + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"QuizBlock\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 7\n      }\n    }, this.state.result ? this.redirectToSurvey() : this.renderQuiz());\n  }\n\n}\n\nexport default QuizBlock;\n/*\nSection header \n<div className=\"QuizBlock-header\">\n          <h2>{this.state.quizQuestionsBlock[this.state.counter].title}</h2>\n        </div>\n*/","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/LEARNOISE-local/webap-learnoise-2/src/components/QuizBlock/QuizBlock.js"],"names":["React","API_URL","Quiz","Report","ReportNA","FreeReport","ButtonQuiz","CheckboxQuiz","QuizBlock","Component","constructor","props","quizQuestionsBlock","location","state","questions","filter","d","surveytag","block_info","date_time_now","Date","toLocaleString","counter","questionCount","question","answerOptions","answer","qtype","questionId","answersCount","result","constraint","participant_info","image","image_a","date_time_start","answered_questionsId","answered_questionsContent","handleAnswerSelected","bind","redirectToSurvey","componentDidMount","firstQuestion","image_item","undefined","require","shuffledAnswerOptions","map","NoShuffleArray","answers","document","body","style","background","setState","shuffleArray","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","answerContent","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","push","nextQuestion","block_id","block_number_survey","TotalBlock","completed","participant_id","prolific_id","study_id","date_time","date","fetch","method","headers","JSON","stringify","history","pathname","newblock_frame","finished","setResults","renderQuiz","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { API_URL } from '../../config';\nimport Quiz from '../Quiz/Quiz';\nimport Report from '../Report/Report';\nimport ReportNA from '../ReportNA/ReportNA';\nimport FreeReport from '../FreeReport/FreeReport';\nimport ButtonQuiz from '../ButtonQuiz/ButtonQuiz';\nimport CheckboxQuiz from '../CheckboxQuiz/CheckboxQuiz'; \n\n\nclass QuizBlock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Get the right questions JSON part\n    var quizQuestionsBlock = this.props.location.state.questions.filter(d => d.surveytag === this.props.location.state.block_info.surveytag);\n    \n    // console.log(quizQuestionsBlock)\n\n    var date_time_now = new Date().toLocaleString();\n    \n    \n    // console.log('QuizBlock Props PINFO:',this.props.location.state.participant_info)\n  \n    this.state = {\n      counter: 0,\n      questionCount: 1, // count across all questions in the questionnaire \n      question: '',\n      answerOptions: [],\n      answer: '',\n      qtype: '',      // the type of the question to be asked\n      questionId: '', // Question id stored in the JS object, does not have to be consecuitive. \n      answersCount: {},\n      result: '',\n      constraint: [], \n      quizQuestionsBlock: quizQuestionsBlock,\n      participant_info: this.props.location.state.participant_info,\n      image: '',    // image question\n      image_a: '', // image - answer if available\n      date_time_start: date_time_now,\n      // This is to be recorded and POSTED to the DB\n      answered_questionsId      : [],\n      answered_questionsContent : [],\n    \n    };\n\n   this.handleAnswerSelected  = this.handleAnswerSelected.bind(this);\n   this.redirectToSurvey      = this.redirectToSurvey.bind(this);\n    \n  }\n\n  componentDidMount() {\n    const firstQuestion = this.state.quizQuestionsBlock[0]\n    const image_item    = (this.state.quizQuestionsBlock[0].image=== undefined) ? null : require('../../images/' + this.state.quizQuestionsBlock[0].image)\n    const image_a       = (this.state.quizQuestionsBlock[0].image_a=== undefined) ? null : require('../../images/' + this.state.quizQuestionsBlock[0].image_a)\n     \n    var shuffledAnswerOptions = this.state.quizQuestionsBlock.map(question =>this.NoShuffleArray(question.answers)); \n    \n    \n    document.body.style.background= '#fff';\n    this.setState({\n      questionId:    firstQuestion.questionId,\n      qtype:         firstQuestion.qtype,\n      question:      firstQuestion.question,\n      answerOptions: shuffledAnswerOptions[0],\n      constraint:    firstQuestion.constraint,\n      image:         image_item, \n      image_a:       image_a, \n      \n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue      = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex]  = temporaryValue;\n    }\n\n    return array;\n  }\n\nNoShuffleArray(array) {\n    var currentIndex = array.length;\n    return array;\n  }\n  // onAnswerSelected points to this function in AnswerOption.js \n  handleAnswerSelected(answerContent,questionId,event) {\n    \n    this.setUserAnswer(event.currentTarget.value,answerContent,questionId); \n\n    if (this.state.questionCount < this.state.quizQuestionsBlock.length) {   \n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.redirectToSurvey(), 300); \n    }\n  }\n\n  setUserAnswer(answer,answerContent,questionId) {\n\n    // This is to be recorded and POSTED to the DB\n    let answered_questionsId = this.state.answered_questionsId;\n      answered_questionsId.push(questionId)\n\n    let answered_questionsContent = this.state.answered_questionsContent;\n      answered_questionsContent.push(answerContent)\n\n    this.setState((state, props) => ({\n      answer: answer,\n      answered_questionsId: answered_questionsId,\n      answered_questionsContent: answered_questionsContent, \n    }));\n\n  }\n\n  setNextQuestion() {\n    const counter       = this.state.counter + 1;\n    const questionCount = this.state.questionCount + 1;\n    const nextQuestion  = this.state.quizQuestionsBlock[counter]\n    const image_item    = (this.state.quizQuestionsBlock[counter].image=== undefined) ? null : require('../../images/' + this.state.quizQuestionsBlock[counter].image)\n    const image_a       = (this.state.quizQuestionsBlock[counter].image_a=== undefined) ? null : require('../../images/' + this.state.quizQuestionsBlock[counter].image_a)\n        \n\n    this.setState({\n      counter: counter,\n      questionCount: questionCount,\n      questionId: nextQuestion.questionId,\n      question: nextQuestion.question,\n      answerOptions: nextQuestion.answers,\n      answer: '',\n      qtype: nextQuestion.qtype,\n      constraint: nextQuestion.constraint,\n      image: image_item,\n      image_a: image_a,\n       \n    });\n  }\n\n  redirectToSurvey ()\n\n  {\n    let block_id = this.state.participant_info.block_number_survey+1\n    // console.log('Block_number QuizBlock:', this.state.participant_info.block_number)\n    var date_time_now = new Date().toLocaleString();\n    \n    if (this.state.participant_info.block_number_survey < this.state.participant_info.TotalBlock) {\n      var completed = 'no'}\n    else if (this.state.participant_info.block_number_survey === this.state.participant_info.TotalBlock) {\n      var completed = 'yes'\n    }\n\n    let body     = {        'participant_id'  : this.state.participant_info.participant_id, \n                            'prolific_id'     : this.state.participant_info.prolific_id, \n                            'study_id'        : this.state.participant_info.study_id,\n                            'block_number'    : this.state.participant_info.block_number_survey+1, \n                            'block_name'      : this.props.location.state.block_info.surveytag, \n                            'question_ids'    : this.state.answered_questionsId, \n                            'answers'         : this.state.answered_questionsContent,\n                            'survey_completed': completed,\n                            'date_time_survey_start'  : this.state.date_time_start,\n                            'date_time_survey_end'    : date_time_now,\n                            'date_time'       : this.props.location.state.participant_info.date_time, \n                            'date'            : this.props.location.state.participant_info.date\n                             \n                          }\n\n  // console.log(body)\n  fetch(`${API_URL}/participants_question_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n       method: 'POST',\n       headers: {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n       },    \n       body: JSON.stringify(body)\n     })\n\n  // console.log('PINFO quizBlock', this.state.participant_info)\n  this.props.history.push({\n      pathname: `/Survey`,\n      state: {participant_info:this.state.participant_info,newblock_frame: false, finished: true}\n    })\n  }\n  \n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    if (this.state.qtype === \"quiz\") \n    { \n      return (\n        <Quiz\n          answer          ={this.state.answer}  \n          answerOptions   ={this.state.answerOptions} \n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          image           ={this.state.image}\n          image_a         ={this.state.image_a}\n          // Add line for the part of the study: NEW \n          survey_part     ={this.state.participant_info.block_number_survey+1}\n          surveyTotal     ={this.state.participant_info.TotalBlock+1}\n        />\n      );\n    } \n\n    else if (this.state.qtype === \"report\")\n\n    {  \n      return (\n        <Report\n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          constraint      ={this.state.constraint}\n          survey_part     ={this.state.participant_info.block_number_survey+1}\n          surveyTotal     ={this.state.participant_info.TotalBlock+1}\n      \n        />\n      );\n  }\n\n  else if (this.state.qtype === \"report-na\") \n  {\n\n    return (\n        <ReportNA\n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          constraint      ={this.state.constraint}\n          survey_part     ={this.state.participant_info.block_number_survey+1}\n          surveyTotal     ={this.state.participant_info.TotalBlock+1}\n      \n      />\n    );\n  }\n\n  else if (this.state.qtype === \"free-report\") \n  {\n    return (\n        <FreeReport\n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          constraint      ={this.state.constraint}\n          survey_part     ={this.state.participant_info.block_number_survey+1}\n          surveyTotal     ={this.state.participant_info.TotalBlock+1}\n      \n      />\n    );\n  }\n\n  else if (this.state.qtype === \"button\") \n  {\n    return (\n        <ButtonQuiz \n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          survey_part     ={this.state.participant_info.block_number_survey+1}\n          surveyTotal     ={this.state.participant_info.TotalBlock+1}\n      \n      />\n    );\n  }\n\n    else if (this.state.qtype === \"checkbox\") \n  {\n    return (\n        <CheckboxQuiz \n          answer          ={this.state.answer}  \n          answerOptions   ={this.state.answerOptions} \n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          survey_part     ={this.state.participant_info.block_number_survey+1}\n          surveyTotal     ={this.state.participant_info.TotalBlock+1}\n      \n      />\n    );\n  }\n}\n\n  render() {\n    return (\n      <div className=\"QuizBlock\">\n        {this.state.result ? this.redirectToSurvey() : this.renderQuiz()} \n      </div>\n    );\n  }\n}\n\nexport default QuizBlock;\n\n/*\nSection header \n<div className=\"QuizBlock-header\">\n          <h2>{this.state.quizQuestionsBlock[this.state.counter].title}</h2>\n        </div>\n*/ \n"]},"metadata":{},"sourceType":"module"}