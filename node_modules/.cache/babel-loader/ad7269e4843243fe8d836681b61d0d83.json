{"ast":null,"code":"import _defineProperty from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/src/components/Consent/Consent.js\";\nimport React, { Component } from \"react\";\nimport { Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport Checkbox from '../Checkbox/Checkbox';\nimport { CSSTransitionGroup } from 'react-transition-group'; // create an Object directly \n\nvar consents = {\n  'checkBox1': 'I have read the information above, and understand what the study involves',\n  'checkBox2': 'I understand that my anonymised personal data can be shared with others for future research, shared in public databases and in scientific reports.',\n  'checkBox3': 'I understand that I am free to withdraw from this study at any time without giving a reason and this will not affect my future medical care or legal rights.',\n  'checkBox4': 'I understand the potential benefits and risks of participating, the support available to me should I become distressed during the research, and who to contact if I wish to lodge a complaint.',\n  'checkBox5': 'I understand the inclusion and exclusion criteria in the Information Sheet and as explained to me by the researcher.  I confirm that I do not fall under the exclusion criteria.',\n  'checkBox6': 'I agree that the research project named above has been explained to me to my satisfaction and I agree to take part in this study.'\n};\nconsole.log(consents);\n\nvar Consent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Consent, _Component);\n\n  function Consent(props) {\n    var _this;\n\n    _classCallCheck(this, Consent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Consent).call(this, props));\n\n    _this.handleCheckboxChange = function (changeEvent) {\n      var name = changeEvent.target.name;\n      console.log(name);\n\n      _this.setState(function (prevState) {\n        return {\n          checkboxes: _objectSpread({}, prevState.checkboxes, _defineProperty({}, name, !prevState.checkboxes[name]))\n        };\n      });\n    };\n\n    var prolific_id = _this.props.location.state.prolific_id;\n    var study_id = _this.props.location.state.study_id;\n    var longit_id = _this.props.location.state.longit_id;\n    var options = {};\n    var answers = {};\n\n    for (var key in consents) {\n      console.log(key);\n      options[consents[key]] = false; // answers[consents[key]] = consents[key] // might be u\n    }\n\n    console.log(options);\n    console.log(answers);\n    _this.state = {\n      checkboxes: options,\n      prolific_id: prolific_id,\n      study_id: study_id,\n      longit_id: longit_id\n    };\n    console.log(_this.state.checkboxes);\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    _this.createCheckBox = _this.createCheckBox.bind(_assertThisInitialized(_this)); //   this.redirectToTarget.bind(this);\n\n    return _this;\n  }\n\n  _createClass(Consent, [{\n    key: \"handleSubmit\",\n    // redirectToTarget = () => {\n    //   this.props.history.push({\n    //     pathname: `/Survey`, \n    //     state: {participant_info: this.state} \n    //   })\n    // }\n    value: function handleSubmit(event) {\n      // console.log(event)\n      event.preventDefault(); // Check if all of the boxes are checked -> redirect to Survey, otherwise POP--UP window: do you want to leave the study?  \n      // console.log(this.state.checkboxes)\n\n      var options = this.state.checkboxes; // const answers   = this.state.answers\n\n      var box_total = Object.keys(options).length;\n\n      var sumValues = function sumValues(obj) {\n        return Object.values(obj).reduce(function (a, b) {\n          return a + b;\n        });\n      };\n\n      var count = sumValues(this.state.checkboxes);\n      console.log('Number of checked boxes:', count); // sub select only answer options that have been checked \n\n      if (count < box_total) {// at least one box is checked\n        // pop-up window or redirect external to prolific \n      } else if (count === box_total) {\n        // redirect to survey here - maybe with the timeout  \n        this.props.history.push({\n          pathname: \"/Survey\",\n          state: {\n            participant_info: this.state\n          }\n        });\n      } else {}\n    }\n  }, {\n    key: \"handleCheckboxChange\",\n    value: function handleCheckboxChange(changeEvent, e) {\n      console.log('ChangeEvent', changeEvent);\n      this.setState(function (prevState) {\n        return {\n          checkboxes: _objectSpread({}, prevState.checkboxes, _defineProperty({}, changeEvent, !prevState.checkboxes[changeEvent]))\n        };\n      });\n    }\n  }, {\n    key: \"createCheckBox\",\n    value: function createCheckBox(key) {\n      var _this2 = this;\n\n      return React.createElement(Checkbox, {\n        label: key.content,\n        type: key.type,\n        isSelected: this.state.checkboxes[key],\n        onCheckboxChange: function onCheckboxChange(e) {\n          return _this2.handleCheckboxChange(key.type, e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(CSSTransitionGroup, {\n        className: \"container\",\n        component: \"div\",\n        transitionName: \"fade\",\n        transitionEnterTimeout: 800,\n        transitionLeaveTimeout: 500,\n        transitionAppear: true,\n        transitionAppearTimeout: 500,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"answerOptions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, consents.map(this.createCheckBox)), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-md-12 pad-20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-save btn-primary pad-20\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return Consent;\n}(Component);\n/*\n<form onSubmit={this.handleFormSubmit}>\n              {this.createCheckboxes()}\n            </form>\n\n\n*/\n\n\nexport default withRouter(Consent);","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/src/components/Consent/Consent.js"],"names":["React","Component","Button","withRouter","Checkbox","CSSTransitionGroup","consents","console","log","Consent","props","handleCheckboxChange","changeEvent","name","target","setState","prevState","checkboxes","prolific_id","location","state","study_id","longit_id","options","answers","key","handleSubmit","bind","createCheckBox","event","preventDefault","box_total","Object","keys","length","sumValues","obj","values","reduce","a","b","count","history","push","pathname","participant_info","e","content","type","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from 'react-bootstrap';\nimport {withRouter} from 'react-router-dom';\nimport Checkbox from '../Checkbox/Checkbox'; \nimport { CSSTransitionGroup } from 'react-transition-group';\n\n\n\n// create an Object directly \nconst consents = \n  {\n    'checkBox1': 'I have read the information above, and understand what the study involves',\n    \n    'checkBox2': 'I understand that my anonymised personal data can be shared with others for future research, shared in public databases and in scientific reports.',\n  \n    'checkBox3': 'I understand that I am free to withdraw from this study at any time without giving a reason and this will not affect my future medical care or legal rights.',\n    \n    'checkBox4': 'I understand the potential benefits and risks of participating, the support available to me should I become distressed during the research, and who to contact if I wish to lodge a complaint.',\n  \n    'checkBox5': 'I understand the inclusion and exclusion criteria in the Information Sheet and as explained to me by the researcher.  I confirm that I do not fall under the exclusion criteria.',\n\n    'checkBox6': 'I agree that the research project named above has been explained to me to my satisfaction and I agree to take part in this study.',\n}; \n\n\nconsole.log(consents)\n\nclass Consent extends Component {\n  constructor(props) {\n    super(props);\n\n    const prolific_id = this.props.location.state.prolific_id\n    const study_id    = this.props.location.state.study_id\n    const longit_id   = this.props.location.state.longit_id\n\n    var options = {}\n    var answers = {}\n\n  for (var key in consents) {\n    console.log(key)\n    options[consents[key]] = false \n    // answers[consents[key]] = consents[key] // might be u\n  }\n\n  console.log(options)\n  console.log(answers)\n  \n  this.state = {\n    checkboxes: options,\n    prolific_id: prolific_id, \n    study_id : study_id,\n    longit_id: longit_id,\n  \n  };\n\n  console.log(this.state.checkboxes)\n\n  this.handleSubmit       = this.handleSubmit.bind(this);  \n  this.createCheckBox     = this.createCheckBox.bind(this); \n\n//   this.redirectToTarget.bind(this);\n}\n\n  \n  handleCheckboxChange = changeEvent => {\n    const { name } = changeEvent.target;\n\n    console.log(name)\n\n    this.setState(prevState => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [name]: !prevState.checkboxes[name],\n      }\n    }));\n\n    \n  };\n\n\n// redirectToTarget = () => {\n//   this.props.history.push({\n//     pathname: `/Survey`, \n//     state: {participant_info: this.state} \n//   })\n// }\n\n\nhandleSubmit(event) {\n        \n        // console.log(event)\n        \n        event.preventDefault();\n\n        // Check if all of the boxes are checked -> redirect to Survey, otherwise POP--UP window: do you want to leave the study?  \n        // console.log(this.state.checkboxes)\n        const options   = this.state.checkboxes\n        // const answers   = this.state.answers\n        const box_total = Object.keys(options).length\n\n        const sumValues = obj => Object.values(obj).reduce((a, b) => a + b);\n        const count = sumValues(this.state.checkboxes);\n        console.log('Number of checked boxes:',count)\n        \n        // sub select only answer options that have been checked \n\n        if (count < box_total){ // at least one box is checked\n            // pop-up window or redirect external to prolific \n          }\n\n        else if (count===box_total) {\n          // redirect to survey here - maybe with the timeout  \n          this.props.history.push({\n            pathname: `/Survey`, \n            state: {participant_info: this.state} \n          })\n        }\n        else {\n\n        }\n      }\n\n\n\nhandleCheckboxChange(changeEvent,e) {\n  console.log('ChangeEvent',changeEvent)\n  \n  this.setState(prevState => ({\n      checkboxes: {\n        ...prevState.checkboxes,\n        [changeEvent]: !prevState.checkboxes[changeEvent],\n      }\n    }));\n}\n\ncreateCheckBox(key) {\n    return (\n      <Checkbox\n        label           ={key.content}\n        type            ={key.type}\n        isSelected      ={this.state.checkboxes[key]}\n        onCheckboxChange={(e)=>this.handleCheckboxChange(key.type,e)}\n      />\n    );\n  }\n\n\n\n  render() {\n    return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n        \n        <div className=\"answerOptions\">\n          {consents.map(this.createCheckBox)}\n        </div>\n      \n      <p></p>\n      <div className=\"col-md-12 pad-20\">\n        <div>\n          <button type=\"button\" className=\"btn btn-save btn-primary pad-20\" onClick={this.handleSubmit}>\n            Submit\n          </button>\n          </div>\n      </div>\n\n    </CSSTransitionGroup>\n  );\n  }\n\n\n}\n\n/*\n<form onSubmit={this.handleFormSubmit}>\n              {this.createCheckboxes()}\n            </form>\n\n\n*/\n\nexport default withRouter(Consent);"]},"metadata":{},"sourceType":"module"}