{"ast":null,"code":"import _classCallCheck from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/src/components/QuizBlock/QuizBlock.js\";\nimport React, { Component } from 'react';\nimport { API_URL } from '../../config';\nimport Quiz from '../Quiz/Quiz';\nimport Report from '../Report/Report';\nimport ReportNA from '../ReportNA/ReportNA';\nimport FreeReport from '../FreeReport/FreeReport';\nimport ButtonQuiz from '../ButtonQuiz/ButtonQuiz';\nimport CheckboxQuiz from '../CheckboxQuiz/CheckboxQuiz';\n\nvar QuizBlock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuizBlock, _Component);\n\n  function QuizBlock(props) {\n    var _this;\n\n    _classCallCheck(this, QuizBlock);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuizBlock).call(this, props)); // Get the right questions JSON part\n\n    console.log(_this.props.location.state.questions);\n\n    var quizQuestionsBlock = _this.props.location.state.questions.filter(function (d) {\n      return d.surveytag === _this.props.location.state.block_info.surveytag;\n    });\n\n    console.log(quizQuestionsBlock);\n    _this.state = {\n      counter: 0,\n      questionCount: 1,\n      // count across all questions in the questionnaire \n      question: '',\n      answerOptions: [],\n      answer: '',\n      qtype: '',\n      // the type of the question to be asked\n      questionId: '',\n      // Question id stored in the JS object, does not have to be consecuitive. \n      answersCount: {},\n      result: '',\n      constraint: [],\n      quizQuestionsBlock: quizQuestionsBlock,\n      participant_info: _this.props.location.state.participant_info,\n      image: '',\n      // This is to be recorded and POSTED to the DB\n      answered_questionsId: [],\n      answered_questionsContent: []\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_this));\n    _this.redirectToSurvey = _this.redirectToSurvey.bind(_assertThisInitialized(_this));\n    console.log(_this.state);\n    return _this;\n  }\n\n  _createClass(QuizBlock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var firstQuestion = this.state.quizQuestionsBlock[0];\n      var image_item = this.state.quizQuestionsBlock[0].image === undefined ? null : require('../../images/' + this.state.quizQuestionsBlock[0].image);\n      var shuffledAnswerOptions = this.state.quizQuestionsBlock.map(function (question) {\n        return _this2.NoShuffleArray(question.answers);\n      });\n      document.body.style.background = '#fff';\n      this.setState({\n        questionId: firstQuestion.questionId,\n        qtype: firstQuestion.qtype,\n        question: firstQuestion.question,\n        answerOptions: shuffledAnswerOptions[0],\n        constraint: firstQuestion.constraint,\n        image: image_item\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"NoShuffleArray\",\n    value: function NoShuffleArray(array) {\n      var currentIndex = array.length;\n      return array;\n    } // onAnswerSelected points to this function in AnswerOption.js \n\n  }, {\n    key: \"handleAnswerSelected\",\n    value: function handleAnswerSelected(answerContent, questionId, event) {\n      var _this3 = this;\n\n      this.setUserAnswer(event.currentTarget.value, answerContent, questionId); // event.currentTarget.value); // to be changed to see what is recorded \n\n      if (this.state.questionCount < this.state.quizQuestionsBlock.length) {\n        // to change to the number of questions in this part of the Survey\n        setTimeout(function () {\n          return _this3.setNextQuestion();\n        }, 300);\n      } else {\n        setTimeout(function () {\n          return _this3.redirectToSurvey();\n        }, 300);\n      }\n    }\n  }, {\n    key: \"setUserAnswer\",\n    value: function setUserAnswer(answer, answerContent, questionId) {\n      // This is to be recorded and POSTED to the DB\n      var answered_questionsId = this.state.answered_questionsId;\n      answered_questionsId.push(questionId);\n      var answered_questionsContent = this.state.answered_questionsContent;\n      answered_questionsContent.push(answerContent);\n      this.setState(function (state, props) {\n        return {\n          answer: answer,\n          answered_questionsId: answered_questionsId,\n          answered_questionsContent: answered_questionsContent\n        };\n      });\n    }\n  }, {\n    key: \"setNextQuestion\",\n    value: function setNextQuestion() {\n      var counter = this.state.counter + 1;\n      var questionCount = this.state.questionCount + 1;\n      var nextQuestion = this.state.quizQuestionsBlock[counter];\n      var image_item = this.state.quizQuestionsBlock[counter].image === undefined ? null : require('../../images/' + this.state.quizQuestionsBlock[counter].image);\n      this.setState({\n        counter: counter,\n        questionCount: questionCount,\n        questionId: nextQuestion.questionId,\n        question: nextQuestion.question,\n        answerOptions: nextQuestion.answers,\n        answer: '',\n        qtype: nextQuestion.qtype,\n        constraint: nextQuestion.constraint // check if exists otherwise empty to implement \n\n      });\n    }\n  }, {\n    key: \"redirectToSurvey\",\n    value: function redirectToSurvey() {\n      var block_id = this.state.participant_info.block_number + 1;\n\n      if (this.state.participant_info.block_number < this.state.participant_info.TotalBlock) {\n        var completed = 'no';\n      } else if (this.state.participant_info.block_number === this.state.participant_info.TotalBlock) {\n        var completed = 'yes'; // add if it is aborted here later \n      }\n\n      var body = {\n        'participant_id': this.state.participant_info.participant_id,\n        'prolific_id': this.state.participant_info.prolific_id,\n        'block_number': this.state.participant_info.block_number + 1,\n        'block_name': this.props.location.state.block_info.surveytag,\n        'question_ids': this.state.answered_questionsId,\n        'answers': this.state.answered_questionsContent,\n        'date': this.state.participant_info.date,\n        'survey_completed': completed\n      };\n      console.log(body);\n      fetch(\"\".concat(API_URL, \"/participants_question_data/create/\") + this.state.participant_info.participant_id + \"/\" + block_id + \"/\" + this.state.participant_info.prolific_id, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      this.props.history.push({\n        pathname: \"/Survey\",\n        state: {\n          participant_info: this.state.participant_info,\n          newblock_frame: false\n        }\n      });\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults(result) {\n      if (result.length === 1) {\n        this.setState({\n          result: result[0]\n        });\n      } else {\n        this.setState({\n          result: 'Undetermined'\n        });\n      }\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      if (this.state.qtype === \"quiz\") {\n        return React.createElement(Quiz, {\n          answer: this.state.answer,\n          answerOptions: this.state.answerOptions,\n          questionId: this.state.questionId,\n          questionCount: this.state.questionCount,\n          question: this.state.question,\n          questionTotal: this.state.quizQuestionsBlock.length,\n          onAnswerSelected: this.handleAnswerSelected,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        });\n      } else if (this.state.qtype === \"report\") {\n        return React.createElement(Report, {\n          answer: this.state.answer,\n          answerOptions: this.state.answerOptions,\n          questionId: this.state.questionId,\n          questionCount: this.state.questionCount,\n          question: this.state.question,\n          questionTotal: this.state.quizQuestionsBlock.length,\n          onAnswerSelected: this.handleAnswerSelected // questions       ={this.state.questions}\n          ,\n          constraint: this.state.constraint,\n          participant_info: this.state.participant_info,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        });\n      } else if (this.state.qtype === \"report-na\") {\n        return React.createElement(ReportNA, {\n          answer: this.state.answer,\n          answerOptions: this.state.answerOptions,\n          questionId: this.state.questionId,\n          questionCount: this.state.questionCount,\n          question: this.state.question,\n          questionTotal: this.state.quizQuestionsBlock.length,\n          onAnswerSelected: this.handleAnswerSelected,\n          constraint: this.state.constraint,\n          participant_info: this.state.participant_info,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        });\n      } else if (this.state.qtype === \"free-report\") {\n        return React.createElement(FreeReport, {\n          answer: this.state.answer,\n          answerOptions: this.state.answerOptions,\n          questionId: this.state.questionId,\n          questionCount: this.state.questionCount,\n          question: this.state.question,\n          questionTotal: this.state.quizQuestionsBlock.length,\n          onAnswerSelected: this.handleAnswerSelected,\n          constraint: this.state.constraint,\n          participant_info: this.state.participant_info,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        });\n      } else if (this.state.qtype === \"button\") {\n        return React.createElement(ButtonQuiz // TO BE MODIFIED \n        , {\n          answer: this.state.answer,\n          answerOptions: this.state.answerOptions,\n          questionId: this.state.questionId,\n          questionCount: this.state.questionCount,\n          question: this.state.question,\n          questionTotal: this.state.quizQuestionsBlock.length,\n          onAnswerSelected: this.handleAnswerSelected,\n          constraint: this.state.constraint,\n          participant_info: this.state.participant_info,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        });\n      } else if (this.state.qtype === \"checkbox\") {\n        return React.createElement(CheckboxQuiz // TO BE MODIFIED \n        , {\n          answer: this.state.answer,\n          answerOptions: this.state.answerOptions,\n          questionId: this.state.questionId,\n          questionCount: this.state.questionCount,\n          question: this.state.question,\n          questionTotal: this.state.quizQuestionsBlock.length,\n          onAnswerSelected: this.handleAnswerSelected,\n          constraint: this.state.constraint,\n          participant_info: this.state.participant_info,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"QuizBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"QuizBlock-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, this.state.quizQuestionsBlock[this.state.counter].title)), this.state.result ? this.redirectToSurvey() : this.renderQuiz());\n    }\n  }]);\n\n  return QuizBlock;\n}(Component);\n\nexport default QuizBlock;","map":{"version":3,"sources":["/Users/vasilisaskvortsova/Documents/COVID-19/covid-webap/src/components/QuizBlock/QuizBlock.js"],"names":["React","Component","API_URL","Quiz","Report","ReportNA","FreeReport","ButtonQuiz","CheckboxQuiz","QuizBlock","props","console","log","location","state","questions","quizQuestionsBlock","filter","d","surveytag","block_info","counter","questionCount","question","answerOptions","answer","qtype","questionId","answersCount","result","constraint","participant_info","image","answered_questionsId","answered_questionsContent","handleAnswerSelected","bind","redirectToSurvey","firstQuestion","image_item","undefined","require","shuffledAnswerOptions","map","NoShuffleArray","answers","document","body","style","background","setState","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","answerContent","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","push","nextQuestion","block_id","block_number","TotalBlock","completed","participant_id","prolific_id","date","fetch","method","headers","JSON","stringify","history","pathname","newblock_frame","title","renderQuiz"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { API_URL } from '../../config';\n\nimport Quiz from '../Quiz/Quiz';\nimport Report from '../Report/Report';\nimport ReportNA from '../ReportNA/ReportNA';\nimport FreeReport from '../FreeReport/FreeReport';\nimport ButtonQuiz from '../ButtonQuiz/ButtonQuiz';\nimport CheckboxQuiz from '../CheckboxQuiz/CheckboxQuiz'; \n\n\nclass QuizBlock extends Component {\n  constructor(props) {\n    super(props);\n\n    // Get the right questions JSON part\n    console.log(this.props.location.state.questions) \n    var quizQuestionsBlock = this.props.location.state.questions.filter(d => d.surveytag === this.props.location.state.block_info.surveytag);\n    \n    console.log(quizQuestionsBlock)\n    \n    this.state = {\n      counter: 0,\n      questionCount: 1, // count across all questions in the questionnaire \n      question: '',\n      answerOptions: [],\n      answer: '',\n      qtype: '',      // the type of the question to be asked\n      questionId: '', // Question id stored in the JS object, does not have to be consecuitive. \n      answersCount: {},\n      result: '',\n      constraint: [], \n      quizQuestionsBlock: quizQuestionsBlock,\n      participant_info: this.props.location.state.participant_info,\n      image: '',\n      \n      // This is to be recorded and POSTED to the DB\n      answered_questionsId      : [],\n      answered_questionsContent : [],\n    \n    };\n\n   this.handleAnswerSelected  = this.handleAnswerSelected.bind(this);\n   this.redirectToSurvey      = this.redirectToSurvey.bind(this);\n    \n    console.log(this.state)\n  }\n\n  componentDidMount() {\n    const firstQuestion       = this.state.quizQuestionsBlock[0]\n    const image_item    = (this.state.quizQuestionsBlock[0].image=== undefined) ? null : require('../../images/' + this.state.quizQuestionsBlock[0].image)\n     \n    var shuffledAnswerOptions = this.state.quizQuestionsBlock.map(question =>this.NoShuffleArray(question.answers)); \n    \n    \n    document.body.style.background= '#fff';\n    this.setState({\n      questionId:    firstQuestion.questionId,\n      qtype:         firstQuestion.qtype,\n      question:      firstQuestion.question,\n      answerOptions: shuffledAnswerOptions[0],\n      constraint:    firstQuestion.constraint,\n      image:         image_item\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue      = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex]  = temporaryValue;\n    }\n\n    return array;\n  }\n\nNoShuffleArray(array) {\n    var currentIndex = array.length;\n    return array;\n  }\n  // onAnswerSelected points to this function in AnswerOption.js \n  handleAnswerSelected(answerContent,questionId,event) {\n    \n    this.setUserAnswer(event.currentTarget.value,answerContent,questionId); // event.currentTarget.value); // to be changed to see what is recorded \n\n    if (this.state.questionCount < this.state.quizQuestionsBlock.length) {  // to change to the number of questions in this part of the Survey\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.redirectToSurvey(), 300); \n    }\n  }\n\n  setUserAnswer(answer,answerContent,questionId) {\n\n    // This is to be recorded and POSTED to the DB\n    let answered_questionsId = this.state.answered_questionsId;\n      answered_questionsId.push(questionId)\n\n    let answered_questionsContent = this.state.answered_questionsContent;\n      answered_questionsContent.push(answerContent)\n\n    this.setState((state, props) => ({\n      answer: answer,\n      answered_questionsId: answered_questionsId,\n      answered_questionsContent: answered_questionsContent, \n    }));\n\n  }\n\n  setNextQuestion() {\n    const counter       = this.state.counter + 1;\n    const questionCount = this.state.questionCount + 1;\n    const nextQuestion  = this.state.quizQuestionsBlock[counter]\n    const image_item    = (this.state.quizQuestionsBlock[counter].image=== undefined) ? null : require('../../images/' + this.state.quizQuestionsBlock[counter].image)\n    \n\n    this.setState({\n      counter: counter,\n      questionCount: questionCount,\n      questionId: nextQuestion.questionId,\n      question: nextQuestion.question,\n      answerOptions: nextQuestion.answers,\n      answer: '',\n      qtype: nextQuestion.qtype,\n      constraint: nextQuestion.constraint // check if exists otherwise empty to implement \n    });\n  }\n\n  redirectToSurvey ()\n\n  {\n    let block_id = this.state.participant_info.block_number+1\n\n    if (this.state.participant_info.block_number < this.state.participant_info.TotalBlock) {\n      var completed = 'no'}\n    else if (this.state.participant_info.block_number === this.state.participant_info.TotalBlock) {\n      var completed = 'yes' // add if it is aborted here later \n    }\n\n    let body     = {        'participant_id'  : this.state.participant_info.participant_id, \n                            'prolific_id'     : this.state.participant_info.prolific_id, \n                            'block_number'    : this.state.participant_info.block_number+1, \n                            'block_name'      : this.props.location.state.block_info.surveytag, \n                            'question_ids'    : this.state.answered_questionsId, \n                            'answers'         : this.state.answered_questionsContent,\n                            'date'            : this.state.participant_info.date,\n                            'survey_completed': completed\n                          }\n\n  console.log(body)\n  fetch(`${API_URL}/participants_question_data/create/` + this.state.participant_info.participant_id + `/` + block_id + `/` + this.state.participant_info.prolific_id, {\n       method: 'POST',\n       headers: {\n         'Accept': 'application/json',\n         'Content-Type': 'application/json',\n       },    \n       body: JSON.stringify(body)\n     })\n\n  this.props.history.push({\n      pathname: `/Survey`,\n      state: {participant_info:this.state.participant_info,newblock_frame: false}\n    })\n  }\n  \n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    if (this.state.qtype === \"quiz\") \n    { \n      return (\n        <Quiz\n          answer          ={this.state.answer}  \n          answerOptions   ={this.state.answerOptions} \n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n        />\n      );\n    } \n\n    else if (this.state.qtype === \"report\")\n\n    {  \n      return (\n        <Report\n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          // questions       ={this.state.questions}\n          constraint      ={this.state.constraint}\n          participant_info={this.state.participant_info}\n        />\n      );\n  }\n\n  else if (this.state.qtype === \"report-na\") \n  {\n\n    return (\n        <ReportNA\n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          constraint      ={this.state.constraint}\n          participant_info={this.state.participant_info}\n      />\n    );\n  }\n\n  else if (this.state.qtype === \"free-report\") \n  {\n    return (\n        <FreeReport\n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          constraint      ={this.state.constraint}\n          participant_info={this.state.participant_info}\n      />\n    );\n  }\n\n  else if (this.state.qtype === \"button\") \n  {\n    return (\n        <ButtonQuiz // TO BE MODIFIED \n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          constraint      ={this.state.constraint}\n          participant_info={this.state.participant_info}\n      />\n    );\n  }\n\n    else if (this.state.qtype === \"checkbox\") \n  {\n    return (\n        <CheckboxQuiz // TO BE MODIFIED \n          answer          ={this.state.answer}\n          answerOptions   ={this.state.answerOptions}\n          questionId      ={this.state.questionId}\n          questionCount   ={this.state.questionCount}\n          question        ={this.state.question}\n          questionTotal   ={this.state.quizQuestionsBlock.length}\n          onAnswerSelected={this.handleAnswerSelected}\n          constraint      ={this.state.constraint}\n          participant_info={this.state.participant_info}\n      />\n    );\n  }\n}\n\n  render() {\n    return (\n      <div className=\"QuizBlock\">\n        <div className=\"QuizBlock-header\">\n          <h2>{this.state.quizQuestionsBlock[this.state.counter].title}</h2>\n        </div>\n        {this.state.result ? this.redirectToSurvey() : this.renderQuiz()} \n      </div>\n    );\n  }\n}\n\nexport default QuizBlock;\n"]},"metadata":{},"sourceType":"module"}